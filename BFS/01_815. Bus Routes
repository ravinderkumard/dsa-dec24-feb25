815. Bus Routes

You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:

Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
Example 2:

Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1
 

 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 105
All the values of routes[i] are unique.
sum(routes[i].length) <= 105
0 <= routes[i][j] < 106
0 <= source, target < 106



1. Create an Adjency list for Route to BusMap.
2. Check if source and target exist in map, return -1 if not.
3. Create 2 set of visited stops and visited busses and queue for BFS.
4. insert source into queue and start iterating 
5. During iteration check if current element from que is target return busCount.
6. otherwise iterate all the buses for the stop and check if you have visited the buses if not iterate all the stops of the bus


class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if(source==target){
            return 0;
        }
        Map<Integer,List<Integer>> routeToBusMap = new HashMap<>();
        for(int r=0;r<routes.length;r++){
           for(int j=0;j<routes[r].length;j++){
            List<Integer> curr = routeToBusMap.getOrDefault(routes[r][j],new LinkedList<>());
            curr.add(r);
            routeToBusMap.put(routes[r][j],curr);
           }
        }
        if(!routeToBusMap.containsKey(source) || !routeToBusMap.containsKey(target)){
            return -1;
        }
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> visitedStops = new HashSet<>();
        Set<Integer> visitedBuses = new HashSet<>();
        queue.add(source);
        
        int busCount = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0;i<size;i++){
                int stop = queue.remove();
                if(stop==target){
                    return busCount;
                }
                for(int bus:routeToBusMap.get(stop)){
                    if(!visitedBuses.contains(bus)){
                        visitedBuses.add(bus);
                        for(int route:routes[bus]){
                            if(!visitedStops.contains(route)){
                                visitedStops.add(route);
                                queue.add(route);
                            }
                        }
                    }
                }
            }
            busCount++;
        }
        return -1;
    }
}
