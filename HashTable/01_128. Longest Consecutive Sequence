128. Longest Consecutive Sequence

URL: https://leetcode.com/problems/longest-consecutive-sequence/description/

128. Longest Consecutive Sequence

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 
Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

 
Constraints:

	0 <= nums.length <= 105
	-109 <= nums[i] <= 109



TC: O(n)
Sc: O(n)
class Solution {
    public int longestConsecutive(int[] nums) {
        int len = nums.length;
        if(len==0){
            return 0;
        }
        Set<Integer> seq = new HashSet<>();
        for(int n:nums){
            seq.add(n);
        }
        int result = Integer.MIN_VALUE;
        for(int n:nums){
            if(!seq.contains(n-1)){
                int count = 1;
                while(seq.contains(n+1)){
                    count++;
                    n++;
                }
                result = Math.max(result,count);
            }
        }
        return result;
    }
}

The complexity of the given code is as follows:
1. Time Complexity
* HashSet population: The first for loop iterates over the array nums and adds each number to the HashSet. This takes O(n) on average because each insertion into a HashSet is O(1).
* Finding the longest consecutive sequence:
    * The second for loop iterates over the array nums, and for each number n, it checks if n−1 exists in the HashSet.
    * If n−1 doesn't exist, it starts counting the consecutive sequence from n. In the worst case, this counting (while loop) iterates over all numbers in the HashSet exactly once, as each number is "visited" only if it's the start of a sequence. Thus, the total time spent in the while loop across all iterations is O(n).
	Overall, the time complexity is:
	O(n)+O(n)=O(n)
2. Space Complexity
* The space complexity is determined by the HashSet, which stores all unique numbers in nums. In the worst case, if all elements in nums are unique, the space complexity is O(n).




TC: O(nLogn)
SC: O(1)
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }

        Arrays.sort(nums);

        int longestStreak = 1;
        int currentStreak = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i-1]) {
                if (nums[i] == nums[i-1]+1) {
                    currentStreak += 1;
                }
                else {
                    longestStreak = Math.max(longestStreak, currentStreak);
                    currentStreak = 1;
                }
            }
        }

        return Math.max(longestStreak, currentStreak);
    }
}



******************************************************************************************************************************************************************




class UnionFind{
      Map<Integer, Integer> parent;
      Map<Integer, Integer> rank;
    UnionFind(){
        parent = new HashMap<>();
        rank = new HashMap<>();
    }
    void add(int x){
        if(!parent.containsKey(x)){
            parent.put(x,x);
            rank.put(x,1);
        }
    }
    int find(int x){
        if(parent.get(x)!=x){
            parent.put(x,find(parent.get(x)));
        }
        return parent.get(x);
    }
    void union(int x,int y){
        int findX = find(x);
        int findY = find(y);
        if(findX!=findY){
            if(rank.get(findX)>rank.get(findY)){
                parent.put(findY,findX);
                rank.put(findX,rank.get(findX)+rank.get(findY));
            } else {
                parent.put(findX,findY);
                rank.put(findY,rank.get(findY)+rank.get(findX));
            }
        }
    }
    int getRank(int x){
        return rank.get(find(x));
    }
}
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums==null||nums.length==0){
            return 0;
        }
        UnionFind uf = new UnionFind();
        for(int num:nums){
            uf.add(num);
        }
        for(int num:nums){
            if(uf.parent.containsKey(num+1)){
                uf.union(num,num+1);
            }
        }
        int maxLength = 0;
        for(int num:nums){
            maxLength = Math.max(maxLength,uf.getRank(num));
        }
        return maxLength;
    }
}
