560. Subarray Sum Equals K

URL: https://leetcode.com/problems/subarray-sum-equals-k/description/



Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 
Example 1:
Input: nums = [1,1,1], k = 2
Output: 2
Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

 
Constraints:

	1 <= nums.length <= 2 * 104
	-1000 <= nums[i] <= 1000
	-107 <= k <= 107




class Solution {
    public int subarraySum(int[] nums, int k) {
        int count=0,currSum=0;
        Map<Long,Integer> prefixSum = new HashMap<>();
        for(int num:nums){
	//Current Sum
            currSum+=num;
		
	// Continuous subarray starts from the beginning of the array
            if(currSum==k){
                count++;
            }
	// The number of times the curr_sum − k has occurred already, determines the number of times a subarray with sum k has occurred up to the current index
            count+=prefixSum.getOrDefault(currSum-k, 0);

	//Add the current sum
            prefixSum.put(currSum,prefixSum.getOrDefault(currSum, 0)+1);
        }
        return count;
    }
}


Complexity Analysis
* Time complexity : O(n). The entire nums array is traversed only once.
* Space complexity : O(n). Hashmap map can contain up to n distinct entries in the worst case.
