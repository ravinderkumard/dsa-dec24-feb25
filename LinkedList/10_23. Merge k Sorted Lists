23. Merge k Sorted Lists

URL: https://leetcode.com/problems/merge-k-sorted-lists/description/



You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 
Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:

Input: lists = []
Output: []

Example 3:

Input: lists = [[]]
Output: []

 
Constraints:

	k == lists.length
	0 <= k <= 104
	0 <= lists[i].length <= 500
	-104 <= lists[i][j] <= 104
	lists[i] is sorted in ascending order.
	The sum of lists[i].length will not exceed 104.





/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   
    public ListNode mergeKLists(ListNode[] lists) {
        return mergeLists(lists,0,lists.length-1);   
    }
    public ListNode mergeLists(ListNode[] a,int lo,int hi){
        if(lo<hi){
            int mid = (lo+hi)/2;
            ListNode first = mergeLists(a,lo,mid);
            ListNode second = mergeLists(a,mid+1,hi);
            return merge(first,second);
        }
        if(lo>=0 && lo < a.length)
            return a[lo];
        else
            return null;
    }
    public ListNode merge(ListNode first, ListNode second){
        ListNode resultant = new ListNode();
        ListNode result = resultant;
        while(first!=null && second!=null){
            if(first.val<=second.val){
                resultant.next = first;
                first = first.next;
            } else {
                resultant.next = second;
                second = second.next;
            }
            resultant = resultant.next;
        }
        if(first!=null){
            resultant.next = first;
        }
        if(second!=null){
            resultant.next = second;
        }
        return result.next;
    }
    
}
