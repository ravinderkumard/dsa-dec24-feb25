2. Add Two Numbers

URL: https://leetcode.com/problems/add-two-numbers/description/?envType=problem-list-v2&envId=aztpy7sh


You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 
Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

 
Constraints:

	The number of nodes in each linked list is in the range [1, 100].
	0 <= Node.val <= 9
	It is guaranteed that the list represents a number that does not have leading zeros.




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int carry = 0;
        ListNode newNode = new ListNode();
        ListNode result = newNode;
        while(l1!=null || l2!=null || carry!=0){
           int sum = 0;
           if(l1!=null){
            sum+=l1.val;
            l1=l1.next;
           }
           if(l2!=null){
            sum+=l2.val;
            l2=l2.next;
           }
           sum+=carry;
           result.next = new ListNode(sum%10);
           carry = sum/10;
           result = result.next;
        }
        return newNode.next;
    
    }
}

******************************************************************************************************************************************************
NOTES:
1. Iterate of Linked list for l1, l2 both non empty and carry is greater than 0
2. set sum = carray and add number from l1 to sum and l2 to sum if list are non empty yet.
3. update carry and create new node for remainder.
4. UPdate pointer.
******************************************************************************************************************************************************


class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int carry = 0;
        ListNode head = new ListNode();
        ListNode ptr = head;
        while(l1!=null || l2!=null||carry!=0){
            int sum = carry;
            if(l1!=null){
                sum+=l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                sum+=l2.val;
                l2=l2.next;
            }
            carry = sum/10;
            ListNode newNode = new ListNode(sum%10);
            ptr.next = newNode;
            
            ptr = newNode;
        }
        
        return head.next;
    }
}
