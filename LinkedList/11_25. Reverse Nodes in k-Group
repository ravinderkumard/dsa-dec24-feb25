
25. Reverse Nodes in k-Group
URL: https://leetcode.com/problems/reverse-nodes-in-k-group/description/

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 
Example 1:

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

 
Constraints:

	The number of nodes in the list is n.
	1 <= k <= n <= 5000
	0 <= Node.val <= 1000

 
Follow-up: Can you solve the problem in O(1) extra memory space?


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null||head.next==null){
            return head;
        }
        int length = getLengthOfList(head);
        ListNode dummyNode = new ListNode();
        dummyNode.next = head;
        ListNode prev = dummyNode;
        ListNode curr;
        ListNode next;
        while(length>=k){
            curr = prev.next;
            next = curr.next;
            for(int i=1;i<k;i++){
                curr.next = next.next;
                next.next = prev.next;
                prev.next = next;
                next = curr.next;
            }
            length-=k;
            prev = curr;
        }
        return dummyNode.next;
    }
    private int getLengthOfList(ListNode head){
        int count = 0;
        while(head!=null){
            count++;
            head = head.next;
        }
        return count;
    }
}




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode ptr = head;
        ListNode ktail = null;
        ListNode new_head = null;
        while(ptr!=null){
            int count = 0;
            ptr = head;
            while(count<k&&ptr!=null){
                ptr = ptr.next;
                count++;
            }
            if(count==k){
                ListNode revHead = reverseLinkedList(head,k);
                if(new_head==null){
                    new_head = revHead;
                }
                if(ktail!=null){
                    ktail.next = revHead;
                }
                ktail = head;
                head = ptr;
            }
        }
        if(ktail!=null){
            ktail.next =head;
        }
        return new_head==null?head:new_head;
    }
    private ListNode reverseLinkedList(ListNode head,int k){
        ListNode prev = null;
        ListNode curr = head;
        while(k>0){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            k--;
        }
        return prev;
    }
}



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        // just a temp node for reference
        if(head == null || k == 1){
            return head;
        }
        ListNode temp = new ListNode(0);
        temp.next = head;
        ListNode prevGroupNode = temp;
        int groupLength = k;
        while(true){
            // Find the end of the current group
            ListNode GroupFirst = head;
            int count = 0;
            while(head != null && count < k){
                head = head.next;
                count++;
            }
            
            if(count == k){
                ListNode nextGroupFirst = head;
                ListNode[] reversed = reverse(GroupFirst,k);
                prevGroupNode.next = reversed[0];
                reversed[1].next = nextGroupFirst;
                prevGroupNode = reversed[1];
                head = nextGroupFirst;
            }else{
                break;
            }
         
            
        }
        return temp.next;
    }
    private ListNode[] reverse(ListNode head, int count){
        ListNode prev=null, curr=head, next = null;
        while(count-- > 0){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return new ListNode[]{prev,head};
    }
}
