61. Rotate List
Solved
Medium
Topics
conpanies icon
Companies
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

Approach:
1. Count number of element in the list.
2. list last element with first making circle.
3. determine k=k%count to define how many time we have to rotate.
4. get kCount = count-k-1;
5. iterate for kCount number of elmenets.
6. point head to curr.next and break the link.
7. Return head.



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        int count = 1;
        if(head==null || head.next==null){
            return head;
        }
        ListNode ptr = head;
        while(ptr.next!=null){
            ptr = ptr.next;
            count++;
        }
        ptr.next = head;
        k = k%count;
        int kCount = count-k-1;
        ListNode curr = head;
        while(kCount>0){
            curr = curr.next;
            kCount--;
        }
        head = curr.next;
        curr.next = null;
        return head;
    }
}
