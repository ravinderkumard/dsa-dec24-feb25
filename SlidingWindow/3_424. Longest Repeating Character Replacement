URL: https://leetcode.com/problems/longest-repeating-character-replacement/description/

424. Longest Repeating Character Replacement

You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 
Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.

Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.

 
Constraints:

	1 <= s.length <= 105
	s consists of only uppercase English letters.
	0 <= k <= s.length




class Solution {
    public int characterReplacement(String s, int k) {
        int left = 0;
        int right = 0;
        int max = 0;
        int maxLength = 0;
        int[] charCount = new int[26];
        while(right<s.length()){
            charCount[s.charAt(right)-'A']++;
            max = Math.max(max,charCount[s.charAt(right)-'A']);
            if((right-left+1)-max>k){
                charCount[s.charAt(left)-'A']--;
                left++;
            }
            maxLength = Math.max(maxLength,right-left+1);
            right++;
        }
        return maxLength;
    }
}



class Solution {
    public int characterReplacement(String s, int k) {
        int left = 0, maxLength = 0, maxFreq=0;
        char[] ans = s.toCharArray();
        int [] arr = new int [26];
        for (int right = 0; right < s.length(); right++) {
            arr[ans[right] - 'A']++; // Increment the frequency of the current character
            maxFreq = Math.max(maxFreq, arr[ans[right] - 'A']);
            // If the number of characters to replace (j - i + 1 - max) is greater than k, shrink the window from the left
            while (right - left + 1 - maxFreq > k) {
                arr[ans[left++] - 'A']--; // Decrement the frequency of the character at the start of the window and move the left pointer
            }
        }
        return ans.length - left;
    }
}
