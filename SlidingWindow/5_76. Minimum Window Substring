76. Minimum Window Substring
URL: https://leetcode.com/problems/minimum-window-substring/description/



Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 
Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

 
Constraints:

	m == s.length
	n == t.length
	1 <= m, n <= 105
	s and t consist of uppercase and lowercase English letters.

 
Follow up: Could you find an algorithm that runs in O(m + n) time?


class Solution {
    public String minWindow(String s, String t) {
        Map<Character,Integer> needMap = new HashMap<>();
        for(char ch:t.toCharArray()){
            needMap.put(ch,needMap.getOrDefault(ch,0)+1);
        }

        int start = 0;
        int minLen = Integer.MAX_VALUE;
        int subStr = 0;
        int matched=0;
        for(int endWindow = 0;endWindow<s.length();endWindow++){
            char right = s.charAt(endWindow);
            if(needMap.containsKey(right)){
                needMap.put(right,needMap.get(right)-1);
                if(needMap.get(right)==0)
                    matched++;
            }
            while(matched==needMap.size()){
                if(minLen>endWindow-start+1){
                    minLen = endWindow-start+1;
                    subStr = start;
                }
                char deleted = s.charAt(start++);
                if(needMap.containsKey(deleted)){
                    if(needMap.get(deleted)==0){
                        matched--;
                    }
                    needMap.put(deleted,needMap.get(deleted)+1);
                }
            }
        }
        return minLen > s.length()?"":s.substring(subStr,subStr+minLen);
    }
}
