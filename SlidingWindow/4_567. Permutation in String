567. Permutation in String

URL: https://leetcode.com/problems/permutation-in-string/description/



Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 
Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false

 
Constraints:

	1 <= s1.length, s2.length <= 104
	s1 and s2 consist of lowercase English letters.




class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length()>s2.length()){
            return false;
        }
        int[] data = new int[26];
        int[] test = new int[26];
        for(char ch:s1.toCharArray()){
            data[ch-'a']++;
        }
        for(int i=0;i<s1.length();i++){
            test[s2.charAt(i)-'a']++;
        }
        int n = s1.length();
        for(int i=0;i<s2.length()-n;i++){
            if(equalsString(test,data)){
                return true;
            }
            test[s2.charAt(i+n)-'a']++;
            test[s2.charAt(i)-'a']--;
        }
        return equalsString(data,test);
    }
    public boolean equalsString(int[] data, int[] test){
        for(int i=0;i<26;i++){
            if(data[i]!=test[i]){
                return false;
            }
        }
        return true;
    }
}
