3. Longest Substring Without Repeating Characters

URL: https://leetcode.com/problems/longest-substring-without-repeating-characters/description/



Given a string s, find the length of the longest substring without repeating characters.

 
Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

 
Constraints:

	0 <= s.length <= 5 * 104
	s consists of English letters, digits, symbols and spaces.



class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left = 0;
        int right = 0;
        int n = s.length();
        Map<Character,Integer> mpp =new HashMap<>();
        int len = 0;
        while(right<n){
            if(mpp.containsKey(s.charAt(right))){
                left = Math.max(left,mpp.get(s.charAt(right))+1);
            }
            len = Math.max(len,right-left+1);
            mpp.put(s.charAt(right),right);
            right++;
        }
        return len;
    }
}


class Solution {
    public int lengthOfLongestSubstring(String s) {
        Integer[] arr = new Integer[128];
        int left = 0;
        int right = 0;
        int max = 0;
        while(right<s.length()){
            char ch = s.charAt(right);
            Integer index = arr[ch];
            if(index!=null && index>=left && index<right){
                left = index+1;
            }
            max = Math.max(right-left+1,max);
            arr[ch]=right;
            right++;
        }
        return max;
    }
}
