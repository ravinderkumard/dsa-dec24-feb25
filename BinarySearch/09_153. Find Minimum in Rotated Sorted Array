153. Find Minimum in Rotated Sorted Array

URL: https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/?envType=problem-list-v2&envId=azcxmsi1



Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

	[4,5,6,7,0,1,2] if it was rotated 4 times.
	[0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 
Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.

Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.

Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

 
Constraints:

	n == nums.length
	1 <= n <= 5000
	-5000 <= nums[i] <= 5000
	All the integers of nums are unique.
	nums is sorted and rotated between 1 and n times.

********************************************************************************** 
NOTES:(Binary Search)

1. Check for boundary conditions if array is sorted(arr[0]<arr[len-1]
2. Find mid of the array.
3. Compare mid with left and right if a[mid]<a[mid+1] that mean rotated at mid+1.
4. Compare mid arr[mid]<arr[mid-1] then rotated at current position.
5. If non of the above condition pass, lets try to short the search space.
********************************************************************************** 


class Solution {
    public int findMin(int[] nums) {
        if(nums==null||nums.length==0){
            return Integer.MAX_VALUE;
        }
        if(nums.length==1){
            return nums[0];
        }
        int left = 0;
        int right = nums.length-1;
        if(nums[right]>nums[left]){
            return nums[left];
        }
        while(left<=right){
            int mid = left+(right-left)/2;
            if(nums[mid]>nums[mid+1]){
                return nums[mid+1];
            }
            if(nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            if(nums[mid]>nums[0]){
                left = mid+1;
            } else {
                right = mid-1;
            }
        }
        return Integer.MAX_VALUE;
    }
}
