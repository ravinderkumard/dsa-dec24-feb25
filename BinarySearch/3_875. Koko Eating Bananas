URL: https://leetcode.com/problems/koko-eating-bananas/description/

875. Koko Eating Bananas

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 
Example 1:

Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:

Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:

Input: piles = [30,11,23,4,20], h = 6
Output: 23

 
Constraints:

	1 <= piles.length <= 104
	piles.length <= h <= 109
	1 <= piles[i] <= 109

********************************************************************************************************************************
NOTES:
1. Here we have to find the search Space for that we can consider check each element from 1 to Infinite to determine the correct number to spend
2. Iterative solution will give TLE as processing each number will be difficult.
3. as we are going from 1 to infiinite i.e increaing order seeems hours are sorted let try with binary search.
	Reduce the search space from 1 to maxvalue.
	and check if the middle elemnt is our desired answer.

********************************************************************************************************************************

class Solution {

    
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = 1;
        for(int pile:piles){
            right = Math.max(right,pile);
        }    
        while(left<right){
            int middle = left+(right-left)/2;
            int hourSpent = 0;
            for(int pile:piles){
                hourSpent+=Math.ceil((double)pile/middle);
            }
            if(hourSpent<=h){
                right = middle;
            } else {
                left = middle+1;
            }
        }
        return right;
    }
}


class Solution {

    
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1;
        int right = 1;
        for(int pile:piles){
            right = Math.max(right,pile);
        }    
        while(left<right){
            int middle = left+(right-left)/2;
            int hourSpent = 0;
            for(int pile:piles){
                hourSpent+=(pile+(middle-1))/middle;
            }
            if(hourSpent<=h){
                right = middle;
            } else {
                left = middle+1;
            }
        }
        return right;
    }
}


class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int res = Integer.MAX_VALUE;
        int low = 1;
        int high = Integer.MAX_VALUE;
        while(low<=high){
            int mid = low+(high-low)/2;
            int hour = helper(piles,mid);
            if(hour>h){
                low=mid+1;
            } else {
                high = mid-1;
                res = Math.min(mid,res);
            }
        }
        return res;
    }
    private int helper(int[] piles,int eating){
        int hour = 0;
        for(int pile:piles){
            hour+=(pile+(eating-1))/eating;
        }
        return hour;
    }
}
