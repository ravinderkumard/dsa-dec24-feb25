84. Largest Rectangle in Histogram

Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.
 
Example 1:
￼
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:
￼
Input: heights = [2,4]
Output: 4
 
Constraints:
* 1 <= heights.length <= 105
* 0 <= heights[i] <= 104
* 

Notes:
1. Add index to stack if value is higher than height at the top of stack.
2. If value is lower than top of the stack start poping element from stack and calculate the area using width and height
3. Then add height to stack
4. For remaining element in stack do the same process but width will be calculated based upon the length of the array.






class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> st = new Stack<>();
        int length = heights.length;
        int maxArea = 0;
        st.push(-1);
        for(int i=0;i<length;i++){
            while(st.peek()!=-1 && heights[st.peek()]>heights[i]){
                int lastIndex = st.pop();
                int currentHeight = heights[lastIndex];
                int currentWidth = i-st.peek()-1;
                maxArea = Math.max(maxArea,currentWidth*currentHeight);
            }
            st.push(i);
        }
        while(st.peek()!=-1){
            int currentHeight = heights[st.pop()];
            int currentWidth = length-st.peek()-1;
            maxArea = Math.max(maxArea,currentHeight*currentWidth);
        }
        return maxArea;
    }
}



class Solution {
    public int largestRectangleArea(int[] heights) {
        int res = 0, n = heights.length;
        Deque<Integer> stk = new ArrayDeque<>();
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(right, n);
        for (int i = 0; i < n; ++i) {
            while (!stk.isEmpty() && heights[stk.peek()] >= heights[i]) {
                right[stk.pop()] = i;
            }
            left[i] = stk.isEmpty() ? -1 : stk.peek();
            stk.push(i);
        }
        for (int i = 0; i < n; ++i) {
            res = Math.max(res, heights[i] * (right[i] - left[i] - 1));
        }
        return res;
    }
}
