

77. Combinations

Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.




class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(n,k,1,result,new ArrayList<>());
        return result;
    }
    private void backtrack(int n,int k,int idx,List<List<Integer>> result,List<Integer> curr){
        if(curr.size()==k){
            result.add(new ArrayList<>(curr));
            return;
        }
        for(int i=idx;i<=n;i++){
            curr.add(i);
            backtrack(n,k,i+1,result,curr);
            curr.remove(curr.size()-1);
        }
    }
}
