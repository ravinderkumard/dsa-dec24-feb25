17. Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].




class Solution {
    static Map<String,String> map = new HashMap<>();
    static {
        map.put("2","abc");
        map.put("3","def");
        map.put("4","ghi");
        map.put("5","jkl");
        map.put("6","mno");
        map.put("7","pqrs");
        map.put("8","tuv");
        map.put("9","wxyz");
    }
    public List<String> letterCombinations(String digits) {
        List<String> result = new ArrayList<>();
        backtrack(digits,result,0,new ArrayList<>());
        return result;
    }
    private void backtrack(String digits,List<String> result,int idx,List<String> curr){
        if(idx==digits.length()){
            StringBuilder sb = new StringBuilder();
            for(String ch:curr){
                sb.append(ch);
            }
            if(!sb.isEmpty())
                result.add(sb.toString());
            return;
        }
        String character = map.get(digits.charAt(idx)+"");
        for(char ch:character.toCharArray()){
            curr.add(ch+"");
            backtrack(digits,result,idx+1,curr);
            curr.remove(curr.size()-1);
        }
    }
}
