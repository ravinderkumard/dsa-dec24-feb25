46. Permutations

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.



class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums,0,result);
        return result;
    }
    private void backtrack(int[] nums,int idx,List<List<Integer>> result){
        if(idx==nums.length){
            List<Integer> curr = new ArrayList<>();
            for(int n:nums){
                curr.add(n);
            }
            result.add(curr);
        }
        for(int i=idx;i<nums.length;i++){
            swap(nums,i,idx);
            backtrack(nums,idx+1,result);
            swap(nums,i,idx);
        }
    }
    private void swap(int[] nums,int left,int right){
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}
