22. Generate Parentheses

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrack(n,0,0,result,new ArrayList<>());
        return result;
    }
    private void backtrack(int n,int open,int close,List<String> result,List<String> curr){
        if(open==n && open==close){
            StringBuilder sb = new StringBuilder();
            for(String s:curr){
                sb.append(s);
            }
            result.add(sb.toString());
        }
        if(open<n){
            curr.add("(");
            backtrack(n,open+1,close,result,curr);
            curr.remove(curr.size()-1);
        }
        if(close<open){
            curr.add(")");
            backtrack(n,open,close+1,result,curr);
            curr.remove(curr.size()-1);
        }
    }
}
