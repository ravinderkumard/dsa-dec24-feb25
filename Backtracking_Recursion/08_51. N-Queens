51. N-Queens

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9




class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        Set<Integer> col = new HashSet<>();
        Set<Integer> posDiag = new HashSet<>();
        Set<Integer> negDiag = new HashSet<>();
        List<List<String>> result = new ArrayList<>();
        backtrack(board,n,0,col,posDiag,negDiag,result);
        return result;
    }
    private void backtrack(char[][] board,int n,int r,Set<Integer> col,Set<Integer> posDiag,Set<Integer> negDiag,List<List<String>> result){
        if(r==n){
            List<String> curr = new ArrayList<>();
            for(int i=0;i<n;i++){
                StringBuilder sb = new StringBuilder();
                sb.append(board[i]);
                curr.add(sb.toString());
            }
            result.add(curr);
            return;
        }

        for(int c=0;c<n;c++){
            if(col.contains(c)||posDiag.contains(r+c)||negDiag.contains(r-c)){
                continue;
            }
            board[r][c] = 'Q';
            col.add(c);
            posDiag.add(r+c);
            negDiag.add(r-c);
            backtrack(board,n,r+1,col,posDiag,negDiag,result);
            board[r][c] = '.';
            col.remove(c);
            posDiag.remove(r+c);
            negDiag.remove(r-c);
        }

    }
}
