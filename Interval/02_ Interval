Given an array of intervals intervals where intervals[i] = [start_i, end_i], return the minimum number of intervals you need to remove to make the rest of the intervals 
non-overlapping.

Note: Intervals are non-overlapping even if they have a common point. For example, [1, 3] and [2, 4] are overlapping, but [1, 2] and [2, 3] are non-overlapping.

Example 1:

Input: intervals = [[1,2],[2,4],[1,4]]

Output: 1
Explanation: After [1,4] is removed, the rest of the intervals are non-overlapping.

Example 2:

Input: intervals = [[1,2],[2,4]]

Output: 0 

end 4


int erase(int[][] interval){
    int count = 0;
    if(interval==null || interval.length<=1){
        return count;
    }
    Arrays.sort(interval, (a,b)->a[1]-b[1]);
    
    int end = Integer.MIN_VALUE;
    for(int[] inter:interval){
        if(end>inter[0]) // previousEnd with current start.
        { 
            count++;
        }
        else {
            end = inter[1];
        }
    }
    return count;

}

Action : Figure out 
