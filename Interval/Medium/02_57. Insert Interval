57. Insert Interval

You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.

Note that you don't need to modify intervals in-place. You can make a new array and return it.

 

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]
Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].
 

Constraints:

0 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 105
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 105


Approach:
1. As existing list is sorted, try to fit the new element in between.
2. If element to be inserted is null or start is greater than existing insert existing elemnt to arraylist.
3. If element to be inserted is smaller than the currently iterating element Insert new element first followed by currenlty iterating lement and then set new element to null so tht it will not check.
4. Update start and end of new element with min and max value with current in case of overlap.
5. If new element is not null put it at the end of the array.
6. return list.

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> intervalList = new ArrayList<>();
        for(int[] interval:intervals){
            if(newInterval==null||interval[1]<newInterval[0]){
                intervalList.add(interval);
            } else if(newInterval[1]<interval[0]){
                intervalList.add(newInterval);
                intervalList.add(interval);
                newInterval = null;
            } else {
                newInterval[0] = Math.min(interval[0],newInterval[0]);
                newInterval[1] = Math.max(interval[1],newInterval[1]);
                
            }
        }
        if(newInterval!=null){
            intervalList.add(newInterval);
        }
        return intervalList.toArray(new int[intervalList.size()][]);
    }
}
