435. Non-overlapping Intervals
Solved
Medium
Topics
conpanies icon
Companies
Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104

Approach:
1. Sort intervals.
2. Set first element as comparing element and start iterating from 2nd index.
3. if start of current intervals is less than first interval, increase removal count
    Also update first interval with current, if end of current is smaller than first.
4. otherwise update first interval with current.
5. REturn result.


class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int removalCount = 0;
        Arrays.sort(intervals,(a,b)->a[0]-b[0]);
        int[] firstInterval = intervals[0];
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]<firstInterval[1]){
                removalCount++;
                if(intervals[i][1]<firstInterval[1]){
                    firstInterval = intervals[i];
                }
            } else {
                firstInterval = intervals[i];
            }
        }
        return removalCount;
    }
}
