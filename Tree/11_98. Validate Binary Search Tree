URL: https://leetcode.com/problems/validate-binary-search-tree/description/

98. Validate Binary Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.

 
Example 1:

Input: root = [2,1,3]
Output: true

Example 2:

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

 
Constraints:

	The number of nodes in the tree is in the range [1, 104].
	-231 <= Node.val <= 231 - 1


class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null){
            return true;
        }
        return validate(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }
    private boolean validate(TreeNode root,long minValue,long maxValue){
        if(root==null){
            return true;
        }
        if(root.val<=minValue || root.val>=maxValue){
            return false;
        }
        return validate(root.left,minValue,root.val) && validate(root.right,root.val,maxValue);
    }
}

Approach 1: Recursive Traversal with Valid Range
class Solution {
    public boolean isValidBST(TreeNode root) {
        return validate(root,null,null);
    }
    private boolean validate(TreeNode root,Integer low, Integer high){
        if(root==null){
            return true;
        }
        if(
            (low!=null && root.val<=low)||
            (high!=null && root.val>=high)
        ){
            return false;
        }
        return (
            validate(root.right,root.val,high) && validate(root.left,low,root.val)
        );
    }
}
Complexity Analysis

Time complexity: O(N) since we visit each node exactly once.
Space complexity: O(N) since we keep up to the entire tree.
