863. All Nodes Distance K in Binary Tree
 
Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

You can return the answer in any order.

 

Example 1:


Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2
Output: [7,4,1]
Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.
Example 2:

Input: root = [1], target = 1, k = 3
Output: []
 

Constraints:

The number of nodes in the tree is in the range [1, 500].
0 <= Node.val <= 500
All the values Node.val are unique.
target is the value of one of the nodes in the tree.
0 <= k <= 1000





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<TreeNode, TreeNode> parent;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        parent = new HashMap<>();
        addParent(root,null);
        List<Integer> answer = new ArrayList<>();
        Set<TreeNode> visited = new HashSet<>();
        dfs(target,k,answer,visited);
        return answer;
    }
    private void addParent(TreeNode curr,TreeNode parent){
        if(curr!=null){
            this.parent.put(curr,parent);
            addParent(curr.left,curr);
            addParent(curr.right,curr);
        }
    }
    private void dfs(TreeNode curr,int distance,List<Integer> answer,Set<TreeNode> visited){
        if(curr==null || visited.contains(curr)){
            return;
        }
        visited.add(curr);
        if(distance==0){
            answer.add(curr.val);
            return;
        }
        dfs(parent.get(curr),distance-1,answer,visited);
        dfs(curr.left,distance-1,answer,visited);
        dfs(curr.right,distance-1,answer,visited);
    }
}
