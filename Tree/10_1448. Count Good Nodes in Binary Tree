URL: https://leetcode.com/problems/count-good-nodes-in-binary-tree/description/

1448. Count Good Nodes in Binary Tree

Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

 
Example 1:

Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.

Example 2:

Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.

Example 3:

Input: root = [1]
Output: 1
Explanation: Root is considered as good.

 
Constraints:

	The number of nodes in the binary tree is in the range [1, 10^5].
	Each node's value is between [-10^4, 10^4].

Solution 1:
class Solution {
    int numGoodNodes = 0;
    public int goodNodes(TreeNode root) {
        if(root==null){
            return numGoodNodes;
        }
        dfs(root,Integer.MIN_VALUE);
        return numGoodNodes;
    }
    private void dfs(TreeNode node,int maxSoFar){
        
        if(maxSoFar<=node.val){
            numGoodNodes++;
        }
        if(node.right!=null){
            dfs(node.right,Math.max(node.val,maxSoFar));
        }
        if(node.left!=null){
            dfs(node.left,Math.max(node.val,maxSoFar));
        }
    }
}
Complexity Analysis

Given N as the number of nodes in the tree,

Time complexity: O(N)

With DFS we visit every node exactly once and do a constant amount of work each time.

Space complexity: O(N)

Because DFS prioritizes depth, our call stack can be as large as the height H of the tree. In the worst case scenario, H=N, if the tree only has one path.



Solution 2:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int goodNodes(TreeNode root) {
        if(root==null){
            return 0;
        }
        return 1+countGood(root.left,root.val)+countGood(root.right,root.val);
    }
    private int countGood(TreeNode root,int max){
        if(root==null){
            return 0;
        }
        int count = 0;
        if(root.val>=max){
            max = root.val;
            count = 1;
        } 
        return count+countGood(root.left,max)+countGood(root.right,max);
    }
}

Solution 3: BFS
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Pair {
    public TreeNode node;
    public int maxSoFar;
    public Pair(TreeNode node,int maxSoFar){
        this.node = node;
        this.maxSoFar = maxSoFar;
    }
}
class Solution {
    public int goodNodes(TreeNode root) {
        int numGoodNodes = 0;
        Queue<Pair> queue = new LinkedList<>();
        queue.offer(new Pair(root,Integer.MIN_VALUE));
        while(queue.size()>0){
            Pair curr = queue.poll();
            if(curr.maxSoFar<=curr.node.val){
                numGoodNodes++;
            }
            if(curr.node.right!=null){
                queue.offer(new Pair(curr.node.right,Math.max(curr.node.val,curr.maxSoFar)));
            }
            if(curr.node.left!=null){
                queue.offer(new Pair(curr.node.left,Math.max(curr.node.val,curr.maxSoFar)));
            }
        }
        return numGoodNodes;
    }
}

Given N as the number of nodes in the tree,

Time complexity: O(N)

With BFS we visit every node exactly once and do a constant amount of work each time.

Space complexity: O(N)

The worst case scenario for space with BFS is when the tree is full. In this scenario, the final level contains N/2 nodes, and our queue will hold all the nodes in the final level at some point.

Solution 4:
class Solution {
    int numberOfGoodNodes = 0;
    public int goodNodes(TreeNode root) {
        if(root==null){
            return numberOfGoodNodes;
        }
        dfs(root,Integer.MIN_VALUE);
        return numberOfGoodNodes;
    }
    private void dfs(TreeNode root,int maxSoFar){
        if(maxSoFar<=root.val){
            numberOfGoodNodes++;
            maxSoFar = root.val;
        }
        if(root.left!=null){
            dfs(root.left,maxSoFar);
        }
        if(root.right!=null){
            dfs(root.right,maxSoFar);
        }
    }
}


Notes: compare current value of node with max so far if value is greater increase good nodes count, and keep going inside to update the max so far, 
