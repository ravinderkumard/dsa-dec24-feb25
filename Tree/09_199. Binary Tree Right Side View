URL: https://leetcode.com/problems/binary-tree-right-side-view/description/

199. Binary Tree Right Side View

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 
Example 1:

Input: root = [1,2,3,null,5,null,4]

Output: [1,3,4]

Explanation:

Example 2:

Input: root = [1,2,3,4,null,null,null,5]

Output: [1,3,4,5]

Explanation:

Example 3:

Input: root = [1,null,3]

Output: [1,3]

Example 4:

Input: root = []

Output: []

 
Constraints:

	The number of nodes in the tree is in the range [0, 100].
	-100 <= Node.val <= 100


******************************************************************************************************************************
	NOTES:
	1. As the problem statement define we are viewing tree from Right side.
	2. we have to record values from root to height of the tree for Level and return right most element of that level.
	3. So we need level wise output, so lets consider Level order traversal in this case.
******************************************************************************************************************************

BFS - Queue
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if(root==null){
            return new ArrayList<>();
        }
        ArrayDeque<TreeNode> queue = new ArrayDeque(){{offer(root);}};
        List<Integer> rightSide = new ArrayList<>();
        while(!queue.isEmpty()){
            int levelLength = queue.size();
            for(int i=0;i<levelLength;i++){
                TreeNode node = queue.poll();
                if(i==levelLength-1){
                    rightSide.add(node.val);
                }
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
        }
        return rightSide;
    }
}
Complexity Analysis
Time complexity: O(N) since one has to visit each node.
Space complexity: O(D) to keep the queues, where D is a tree diameter. Let's use the last level to estimate the queue size. This level could contain up to N/2 tree nodes in the case of complete binary tree.


******************************************************************************************************************************
	NOTES:
	1. As the problem statement define we are viewing tree from Right side.
	2. Another way to look at this problem is to recursively process the node and as we reach the last element of the level put that into result.
	3. Here we have a twist.
		For Pre order traversal we have : 1. root, left and then right. Here we will do Root, then right and then left.
		So that we will process right node first as we have to display right side view if we process left node first we will get left 
		View first.
******************************************************************************************************************************


Optimized
DFS - Recursive
class Solution {
    public List<Integer> rightSideView(TreeNode root) {

        List<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        rightView(root,result,0);
        return result;
    }
    private void rightView(TreeNode root,List<Integer> result,int level){
        if(root==null){
            return;
        }
        if(result.size()==level){
            result.add(root.val);
        }
        rightView(root.right,result,level+1);
        rightView(root.left,result,level+1);
    }
}
Complexity Analysis
Time complexity: O(N) since one has to visit each node.
Space complexity: O(H) to keep the recursion stack, where H is a tree height. The worst-case situation is a skewed tree when H=N.
