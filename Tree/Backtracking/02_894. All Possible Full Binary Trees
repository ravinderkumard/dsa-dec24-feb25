894. All Possible Full Binary Trees

URL: https://leetcode.com/problems/all-possible-full-binary-trees/description/



Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 
Example 1:

Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

Example 2:

Input: n = 3
Output: [[0,0,0]]

 
Constraints:

	1 <= n <= 20


Recursion:

class Solution {
    Map<Integer,List<TreeNode>> memo = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int n) {
        if(n%2==0){
            return new ArrayList<>();
        }
        if(n==1){
            return Arrays.asList(new TreeNode());
        }
        List<TreeNode> res = new ArrayList<>();
        for(int i=1;i<n;i+=2){
            List<TreeNode> left = allPossibleFBT(i);
            List<TreeNode> right = allPossibleFBT(n-i-1);
            for(TreeNode l:left){
                for(TreeNode r:right){
                    TreeNode root = new TreeNode(0,l,r);
                    res.add(root);
                }
            }
        }
        return res;
    }
}




Recursion with Memoization
class Solution {
    Map<Integer,List<TreeNode>> memo = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int n) {
        if(n%2==0){
            return new ArrayList<>();
        }
        if(n==1){
            return Arrays.asList(new TreeNode());
        }
        if(memo.containsKey(n)){
            return memo.get(n);
        }
        List<TreeNode> res = new ArrayList<>();
        for(int i=1;i<n;i+=2){
            List<TreeNode> left = allPossibleFBT(i);
            List<TreeNode> right = allPossibleFBT(n-i-1);
            for(TreeNode l:left){
                for(TreeNode r:right){
                    TreeNode root = new TreeNode(0,l,r);
                    res.add(root);
                }
            }
        }
        memo.put(n,res);
        return res;
    }
}

Complexity Analysis
Time complexity: O(2^(n/2))

Space complexity: O(n⋅2^(n/2))


Iterative
class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
        if(n%2==0){
            return new ArrayList<>();
        }
        List<List<TreeNode>> dp = new ArrayList<>();
        for(int i=0;i<=n;i++){
            dp.add(new ArrayList<>());
        }
        dp.get(1).add(new TreeNode(0));
        for(int count=3;count<=n;count+=2){
            for(int i=1;i<count-1;i+=2){
                int j=count-1-i;
                for(TreeNode left:dp.get(i)){
                    for(TreeNode right: dp.get(j)){
                        TreeNode root = new TreeNode(0,left,right);
                        dp.get(count).add(root);
                    }
                }
            }
        }
        return dp.get(n);
    }
}
