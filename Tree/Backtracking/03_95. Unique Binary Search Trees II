95. Unique Binary Search Trees II

Medium


6K

390



Companies
Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.
 
Example 1:
￼
Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
Example 2:
Input: n = 1
Output: [[1]]
 
Constraints:
* 1 <= n <= 8
* 


*****************************************************************************
Notes: Refer to problem #96
1. Here we have to give the list of subtrees using n
2. Lets do back tracking start from 0 to i-1 and i+1 to n.
3. Iterate over left sub and right subtrre and ad that to trees list.

*****************************************************************************


Solution 1: Backtracking
class Solution {
    public List<TreeNode> generateTrees(int n) {
         if(n==0){
            return new ArrayList<>();
        }
        return generateSubTrees(1,n);
    }
    private List<TreeNode> generateSubTrees(int start,int end){
        List<TreeNode> trees = new ArrayList<>();
        // Base case: If start > end, return an empty tree (null)
        if(start>end){
            trees.add(null);
            return trees;
        }
        for(int i=start;i<=end;i++){
            // Recursively generate all left subtrees with values less than i
            List<TreeNode> leftSubtrees = generateSubTrees(start,i-1);
            // Recursively generate all right subtrees with values greater than i
            List<TreeNode> rightSubtrees = generateSubTrees(i+1,end);
            for(TreeNode left:leftSubtrees){
                for(TreeNode right:rightSubtrees){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    trees.add(root);
                }
            }
        }
        return trees;
    }
}



Backtracking with Memoization

class Solution {
    public List<TreeNode> generateTrees(int n) {
        Map<Pair<Integer, Integer>, List<TreeNode>> memo = new HashMap<>();
        return backtrack(1,n,memo);
    }
    private List<TreeNode> backtrack(int start,int end,Map<Pair<Integer, Integer>, List<TreeNode>> memo){
        List<TreeNode> res = new LinkedList<>();
        if(start>end){
            res.add(null);
            return res;
        }
        if(memo.containsKey(new Pair<>(start,end))){
            return memo.get(new Pair<>(start,end));
        }
        for(int i=start;i<=end;i++){
            List<TreeNode> left = backtrack(start,i-1,memo);
            List<TreeNode> right = backtrack(i+1,end,memo);
            for(TreeNode l:left){
                for(TreeNode r:right){
                    TreeNode root = new TreeNode(i,l,r);
                    
                    res.add(root);
                }
            }
        }
        memo.put(new Pair<>(start,end),res);
        return res;
    }
}



class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n==0){
            return new ArrayList<>();
        }
        //Map<String,List<TreeNode>> memo = new HashMap<>();
        List<TreeNode>[][] memo = new ArrayList[n+1][n+1];
        return generateSubTrees(1,n,memo);
    }
    private List<TreeNode> generateSubTrees(int start,int end,List<TreeNode>[][] memo){
        List<TreeNode> trees = new ArrayList<>();
        // Base case: If start > end, return an empty tree (null)
        if(start>end){
            trees.add(null);
            return trees;
        }
        if(memo[start][end]!=null)
            memo[start][end] = trees;
        for(int i=start;i<=end;i++){
            // Recursively generate all left subtrees with values less than i
            List<TreeNode> leftSubtrees = generateSubTrees(start,i-1,memo);
            // Recursively generate all right subtrees with values greater than i
            List<TreeNode> rightSubtrees = generateSubTrees(i+1,end,memo);
            for(TreeNode left:leftSubtrees){
                for(TreeNode right:rightSubtrees){
                    TreeNode root = new TreeNode(i);
                    root.left = left;
                    root.right = right;
                    trees.add(root);
                }
            }
        }
        memo[start][end] = trees;
        return trees;
    }
}



Iterative
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<List<List<TreeNode>>> dp = new ArrayList<>(n+1);
        for(int i=0;i<=n;i++){
            List<List<TreeNode>> innerList = new ArrayList<>(n+1);
            for(int j=0;j<=n;j++){
                innerList.add(new ArrayList<>());
            }
            dp.add(innerList);
        }
        for(int i=1;i<=n;i++){
            dp.get(i).get(i).add(new TreeNode(i));
        }
        for(int numberOfNodes = 2;numberOfNodes<=n;numberOfNodes++){
            for(int start=1;start<=n-numberOfNodes+1;start++){
                int end = start+numberOfNodes-1;
                for(int i=start;i<=end;i++){
                    List<TreeNode> leftSubtrees = (i!=start)?dp.get(start).get(i-1):new ArrayList<>();
                    if(leftSubtrees.isEmpty()){
                        leftSubtrees.add(null);
                    }
                    List<TreeNode> rightSubtrees = (i!=end)?dp.get(i+1).get(end):new ArrayList<>();
                    if(rightSubtrees.isEmpty()){
                        rightSubtrees.add(null);
                    }

                    for(TreeNode left:leftSubtrees){
                        for(TreeNode right:rightSubtrees){
                            TreeNode root = new TreeNode(i,left,right);
                            dp.get(start).get(end).add(root);
                        }
                    }
                }
            }
        }
        return dp.get(1).get(n);
    }
}


class Solution {
    public List<TreeNode> generateTrees(int n) {
        List<List<TreeNode>> dp = new ArrayList<>(n+1);
        
        for(int i=0;i<=n;i++){
            dp.add(new ArrayList<>());
        }
        dp.get(0).add(null);
        for(int numberOfNodes = 1;numberOfNodes<=n;numberOfNodes++){
            for(int i=1;i<=numberOfNodes;i++){
                int j=numberOfNodes-i;
                for(TreeNode left:dp.get(i-1)){
                    for(TreeNode right:dp.get(j)){
                        TreeNode root = new TreeNode(i,left,clone(right,i));
                        dp.get(numberOfNodes).add(root);
                    }
                }
            }
        }
        return dp.get(n);
    }
    private TreeNode clone(TreeNode node, int offset) {
        if (node == null) {
            return null;
        }
        TreeNode clonedNode = new TreeNode(node.val + offset);
        clonedNode.left = clone(node.left, offset);
        clonedNode.right = clone(node.right, offset);
        return clonedNode;
    }
}
