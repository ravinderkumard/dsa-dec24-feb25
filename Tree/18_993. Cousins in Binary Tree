993. Cousins in Binary Tree

Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.

Two nodes of a binary tree are cousins if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:


Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
1 <= Node.val <= 100
Each node has a unique value.
x != y
x and y are exist in the tree.


Approach:
1. We have to find if 2 nodes are at same depth.
2. If both the nodes have different parent.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int recordedDepth = -1;
    boolean isCousin = false;
    public boolean isCousins(TreeNode root, int x, int y) {
        dfs(root,0,x,y);
        return this.isCousin;
    }
    private boolean dfs(TreeNode node,int depth,int x,int y){
        if(node==null){
            return false;
        }
        if(this.recordedDepth!=-1 && depth>this.recordedDepth){
            return false;
        }
        if(node.val==x || node.val==y){
            if(this.recordedDepth == -1){
                this.recordedDepth = depth;
            }
            return this.recordedDepth ==depth;
        }
        boolean left = dfs(node.left,depth+1,x,y);
        boolean right = dfs(node.right,depth+1,x,y);
        if(left && right && this.recordedDepth!=depth+1){
            this.isCousin = true;
        }
        return left||right;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode xParent,yParent;
    int xLevel, yLevel;
    public boolean isCousins(TreeNode root, int x, int y) {
        xParent = null;
        yParent = null;
        xLevel = -1;
        yLevel = -1;
        findNodeInfo(root,null,x,y,0);

        return xLevel==yLevel && xParent!=yParent;
    }
    private void findNodeInfo(TreeNode current,TreeNode parent,int x,int y, int level){
        if(current==null){
            return;
        }
        if(current.val==x){
            xLevel = level;
            xParent = parent;
        } else if(current.val==y){
            yParent = parent;
            yLevel = level;
        }
        findNodeInfo(current.left,current,x,y,level+1);
        findNodeInfo(current.right,current,x,y,level+1);
    }
}
