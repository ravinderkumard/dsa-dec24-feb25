236. Lowest Common Ancestor of a Binary Tree
Medium
URL: https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 
Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.

Example 3:

Input: root = [1,2], p = 1, q = 2
Output: 1

 
Constraints:

	The number of nodes in the tree is in the range [2, 105].
	-109 <= Node.val <= 109
	All Node.val are unique.
	p != q
	p and q will exist in the tree.
*************************************************************************************

	NOTES:
	1. This is an exmaple of Binary Tree, So like 235 where we have to search node in BST we donot have a set pattern of element
		on left side or right side to node.
	2. So, idea is to iterate both left and right side of the tree and check both p and q or both left and right of the node if they are not node itself.
	3. Check if the p or q itself is at root => retrun root if so.
	4. Check both P and Q on Left side of the root and similarly check P and Q or Right side of root.
	5. If both are are not null that mean P and Q reside in both left and right side to tree so return root.
	6. If either is not null return resutl accordingly.

	Consider: Values in tree are unique and their may exist values in tree.

*************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null||root==p||root==q){
            return root;
        }
        TreeNode leftHalf = lowestCommonAncestor(root.left,p,q);
        TreeNode rightHalf = lowestCommonAncestor(root.right,p,q);
        if(leftHalf!=null && rightHalf!=null){
            return root;
        } else if(leftHalf!=null){
            return leftHalf;
        } else {
            return rightHalf;
        }
    }
   
}
