687. Longest Univalue Path

URL: https://leetcode.com/problems/longest-univalue-path/description/



Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.

 
Example 1:

Input: root = [5,4,5,1,1,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 5).

Example 2:

Input: root = [1,4,5,4,4,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 4).

 
Constraints:

	The number of nodes in the tree is in the range [0, 104].
	-1000 <= Node.val <= 1000
	The depth of the tree will not exceed 1000.




class Solution {
    int ans;
    public int longestUnivaluePath(TreeNode root) {
        solve(root,-1);
        return ans;
    }
    private int solve(TreeNode root,int parent){
        if(root==null){
            return 0;
        }
        int left = solve(root.left,root.val);
        int right = solve(root.right,root.val);
        ans = Math.max(ans,left+right);
        return root.val == parent?Math.max(left,right)+1:0;
    }
}

Complexity Analysis
Here, N is the number of nodes in the binary tree.
* Time complexity: O(N) We are iterating over each node only once and hence the time complexity is equal to O(N).
* Space complexity: O(N) The only space we need is during the recursion, the maximum number of active stack calls would be equal to the height of the tree. In the case of a skewed tree, the height of the tree will be equal to N, hence the space complexity is equal to O(N).



class Solution {
    
    public int longestUnivaluePath(TreeNode root) {
        int[] ans = new int[1];
        solve(root,-1,ans);
        return ans[0];
    }
    private int solve(TreeNode root,int parent,int[] ans){
        if(root==null){
            return 0;
        }
        int left = solve(root.left,root.val,ans);
        int right = solve(root.right,root.val,ans);
        ans[0] = Math.max(ans[0],left+right);
        return root.val == parent?Math.max(left,right)+1:0;
    }
}

