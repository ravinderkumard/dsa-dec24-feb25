250. Count Univalue Subtrees

URL: https://leetcode.com/problems/count-univalue-subtrees/description/



Given the root of a binary tree, return the number of uni-value subtrees.

A uni-value subtree means all nodes of the subtree have the same value.

 
Example 1:

Input: root = [5,1,5,5,5,null,5]
Output: 4

Example 2:

Input: root = []
Output: 0

Example 3:

Input: root = [5,5,5,5,5,null,5]
Output: 6

 
Constraints:

	The number of the node in the tree will be in the range [0, 1000].
	-1000 <= Node.val <= 1000




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        dfs(root);
        return count;
    }
    private boolean dfs(TreeNode root){
        if(root==null){
            return true;
        }
        boolean left = dfs(root.left);
        boolean right = dfs(root.right);
        if(left && right){
            if(root.left!=null && root.left.val!=root.val){
                return false;
            }
            if(root.right!=null && root.right.val!=root.val){
                return false;
            }
            count++;
            return true;
        }
        return false;
    }
}



class Solution {
    //int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        return dfs(root).getValue();
        
    }
    private Pair<Boolean,Integer> dfs(TreeNode root){
        if(root==null){
            return new Pair(true,0);
        }
        Pair<Boolean,Integer>  left = dfs(root.left);
        Pair<Boolean,Integer>  right = dfs(root.right);

        int count = left.getValue() + right.getValue();
        if(left.getKey() && right.getKey()){
            if(root.left!=null && root.left.val!=root.val){
                return new Pair(false,count);
            }
            if(root.right!=null && root.right.val!=root.val){
                return new Pair(false,count);
            }
            count++;
            return new Pair(true,count);
        }
        return new Pair(false,count);
    }
}


class Solution {
    //int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        int[] count = new int[1];
        dfs(root,count);
        return count[0];
    }
    private boolean dfs(TreeNode root,int[] count){
        if(root==null){
            return true;
        }
        boolean left = dfs(root.left,count);
        boolean right = dfs(root.right,count);

        if(left && right && (root.left==null||root.left.val==root.val) 
                && (root.right==null||root.right.val==root.val)){
            
            count[0]++;
            return true;
        }
        return false;
    }
}

Complexity Analysis
Here n is the number of nodes in the given binary tree.
* Time complexity: O(n).
    * We traverse once over each node of the tree using DFS traversal which takes O(n) time.
* Space complexity: O(n).
    * The DFS traversal is recursive and would take some space to store the stack calls. The maximum number of active stack calls at a time would be the tree's height, which in the worst case would be O(n) when the tree is a straight line.
