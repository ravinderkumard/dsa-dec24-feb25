
652. Find Duplicate Subtrees

URL: https://leetcode.com/problems/find-duplicate-subtrees/description/



Given the root of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.

 
Example 1:

Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]

Example 2:

Input: root = [2,1,1]
Output: [[1]]

Example 3:

Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]

 
Constraints:

	The number of the nodes in the tree will be in the range [1, 5000]
	-200 <= Node.val <= 200



class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> res = new LinkedList<>();
        traverse(root,new HashMap<>(),res);
        return res;
    }
    private String traverse(TreeNode node,Map<String,Integer> cnt,List<TreeNode> res){
        if(node==null){
            return "";
        }
        String representation = "("+traverse(node.left,cnt,res)+")"+node.val +"("+traverse(node.right,cnt,res)+")";
        cnt.put(representation,cnt.getOrDefault(representation, 0)+1);
        if(cnt.get(representation)==2){
            res.add(node);
        }
        return representation;
    }
}

Complexity Analysis
Let n denote the number of nodes.
* Time complexity: O(n^2).
The string representation of each subtree can have a length up to O(n). Creating each representation therefore costs up to O(n), and we find string representations for all O(n) subtrees during the traversal.
* Space complexity: O(n).
We store all string representations in the hash map. There are O(n) subtrees, and each subtree representation has the length of O(n).




class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> res = new LinkedList<>();
        traverse(root,new HashMap<>(),new HashMap<>(),res);
        return res;
    }
    private int traverse(TreeNode node,Map<String,Integer> tripletToId,Map<Integer,Integer> cnt,List<TreeNode> res){
        if(node==null){
            return 0;
        }
        String triplet = traverse(node.left,tripletToId,cnt,res)+","+node.val+","+traverse(node.right, tripletToId, cnt, res);
        if(!tripletToId.containsKey(triplet)){
            tripletToId.put(triplet,tripletToId.size()+1);
        }
        int id = tripletToId.get(triplet);
        cnt.put(id,cnt.getOrDefault(id, 0)+1);
        if(cnt.get(id)==2){
            res.add(node);
        }
        return id;
    }
}

Complexity Analysis
Let n denote the number of nodes.
* Time complexity: O(n).
We traverse the tree with n nodes and, for each subtree, find a triplet and an ID. We perform operations with the hash maps tripletToID and cnt. Since an ID is an integer and a triplet has a length of 3 (O(1)), these operations take O(1) time for each of the n nodes.
* Space complexity: O(n).
We store the hash maps tripletToID and cnt, which take O(n) memory. Also, the recursion stack takes O(n) memory.
