666. Path Sum IV
URL: https://leetcode.com/problems/path-sum-iv/description/



If the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. You are given an ascending array nums consisting of three-digit integers representing a binary tree with a depth smaller than 5, where for each integer:

	The hundreds digit represents the depth d of this node, where 1 <= d <= 4.
	The tens digit represents the position p of this node within its level, where 1 <= p <= 8, corresponding to its position in a full binary tree.
	The units digit represents the value v of this node, where 0 <= v <= 9.

Return the sum of all paths from the root towards the leaves.

It is guaranteed that the given array represents a valid connected binary tree.

 
Example 1:

Input: nums = [113,215,221]

Output: 12

Explanation:

The tree that the list represents is shown.
The path sum is (3 + 5) + (3 + 1) = 12.

Example 2:

Input: nums = [113,221]

Output: 4

Explanation:

The tree that the list represents is shown. 
The path sum is (3 + 1) = 4.

 
Constraints:

	1 <= nums.length <= 15
	110 <= nums[i] <= 489
	nums represents a valid binary tree with depth less than 5.
	nums is sorted in ascending order




class Solution {

    Map<Integer, Integer> map = new HashMap<>();

    public int pathSum(int[] nums) {
        // Store the data in a hashmap, with the coordinates as the key and the
        // node value as the value
        for (int num : nums) {
            int key = num / 10;
            int value = num % 10;
            map.put(key, value);
        }

        return dfs(nums[0] / 10, 0);
    }

    private int dfs(int root, int preSum) {
        // Find the level and position values from the coordinates
        int level = root / 10;
        int pos = root % 10;

        //the left child and right child position in the tree
        int left = (level + 1) * 10 + pos * 2 - 1;
        int right = (level + 1) * 10 + pos * 2;
        int currSum = preSum + map.get(root);

        // If the node is a leaf node, return its root to leaf path sum.
        if (!map.containsKey(left) && !map.containsKey(right)) {
            return currSum;
        }

        // Otherwise iterate through the left and right children recursively
        // using depth first search
        int leftSum = map.containsKey(left) ? dfs(left, currSum) : 0;
        int rightSum = map.containsKey(right) ? dfs(right, currSum) : 0;

        //return the total path sum of the tree rooted at the current node
        return leftSum + rightSum;
    }
}

Complexity Analysis
Let n be the number of nodes in the tree.
* Time complexity: O(n) All hashmap insertion and search operations take constant time. Apart from this, in the dfs function, we visit all the nodes of the tree exactly once. Therefore, the time complexity is given by O(n).
* Space complexity: O(n) We perform exactly n insertion operations in the hashmap. For the dfs function, the stack space can go up to n in the worst case. Therefore, the total space complexity is given by O(n).




class Solution {

    public int pathSum(int[] nums) {
        // Store the node values in a hashmap, using coordinates as the key.
        Map<Integer, Integer> map = new HashMap<>();
        for (int element : nums) {
            int coordinates = element / 10;
            int value = element % 10;
            map.put(coordinates, value);
        }

        // Initialize the BFS queue and start with the root node.
        Queue<Pair<Integer, Integer>> q = new LinkedList<>();
        int totalSum = 0;

        int rootCoordinates = nums[0] / 10;
        q.add(
            new Pair<Integer, Integer>(
                rootCoordinates,
                map.get(rootCoordinates)
            )
        );

        while (!q.isEmpty()) {
            Pair<Integer, Integer> current = q.poll();
            int coordinates = current.getKey();
            int currentSum = current.getValue();
            int level = coordinates / 10;
            int position = coordinates % 10;

            // Find the left and right child coordinates.
            int left = (level + 1) * 10 + position * 2 - 1;
            int right = (level + 1) * 10 + position * 2;

            // If it's a leaf node (no left and right children), add currentSum to totalSum.
            if (!map.containsKey(left) && !map.containsKey(right)) {
                totalSum += currentSum;
            }

            // Add the left child to the queue if it exists.
            if (map.containsKey(left)) {
                q.add(
                    new Pair<Integer, Integer>(left, currentSum + map.get(left))
                );
            }

            // Add the right child to the queue if it exists.
            if (map.containsKey(right)) {
                q.add(
                    new Pair<Integer, Integer>(
                        right,
                        currentSum + map.get(right)
                    )
                );
            }
        }

        return totalSum;
    }
}

Complexity Analysis
Let n be the number of nodes in the tree.
* Time complexity: O(n) All hashmap insertion and search operations take constant time. Apart from this, in the breadth-first search, we visit all the nodes of the tree exactly once. Therefore, the time complexity is given by O(n).
* Space complexity: O(n) We perform exactly n insertion operations in the hashmap. For the breadth-first search, the queue q stores all the elements exactly once. Therefore, the total space complexity is given by O(n).
