1120. Maximum Average Subtree
URL: https://leetcode.com/problems/maximum-average-subtree/description/



Given the root of a binary tree, return the maximum average value of a subtree of that tree. Answers within 10-5 of the actual answer will be accepted.

A subtree of a tree is any node of that tree plus all its descendants.

The average value of a tree is the sum of its values, divided by the number of nodes.

 
Example 1:

Input: root = [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.

Example 2:

Input: root = [0,null,1]
Output: 1.00000

 
Constraints:

	The number of nodes in the tree is in the range [1, 104].
	0 <= Node.val <= 105

****************************************************************************************************************
NOTES:
1. Define a State class with count, sum and avg variable.
2. Run DFS on root.
	if root is null return new State(0,0,0)
	Recursively call dfs with left and right of root.
	now calculate count = left.count + right.count+1(define current node+nodes on left and nodes on right;
	calcualte sum = current root value + left value + right value;
	Define avergate as max of current with (sum/count,Math.max(leftaverge,rightaverge));
	return new state.
****************************************************************************************************************


class Solution {
    class State {
        int nodeCount;
        int valueSum;
        double maxAverage;
        State(int nodes,int sum,double maxAverage){
            this.nodeCount = nodes;
            this.valueSum = sum;
            this.maxAverage = maxAverage;
        }
    }
    
    public double maximumAverageSubtree(TreeNode root) {
        return maxAverage(root).maxAverage;    
    }

    State maxAverage(TreeNode root){
        if(root==null){
            return new State(0,0,0);
        }
        State left = maxAverage(root.left);
        State right = maxAverage(root.right);
        int nodeCount = left.nodeCount+right.nodeCount+1;
        int sum = root.val+left.valueSum+right.valueSum;
        double maxAverage = Math.max(((1.0*sum)/nodeCount),Math.max(right.maxAverage,left.maxAverage));
        return new State(nodeCount, sum, maxAverage);
    }
}


Complexity Analysis
* Time complexity : O(N), where N is the number of nodes in the tree. This is because we visit each and every node only once, as we do in postorder traversal.
* Space complexity : O(N), because we will create N states for each of the nodes in the tree. Also, in cases where we have a skewed tree, we will implicitly maintain a recursion stack of size N, hence space complexity from this will also be O(N).
