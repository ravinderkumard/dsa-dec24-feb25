
210. Course Schedule II
Medium

URL: https://leetcode.com/problems/course-schedule-ii/description/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

	For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 
Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]

 
Constraints:

	1 <= numCourses <= 2000
	0 <= prerequisites.length <= numCourses * (numCourses - 1)
	prerequisites[i].length == 2
	0 <= ai, bi < numCourses
	ai != bi
	All the pairs [ai, bi] are distinct.



class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
     Map<Integer,List<Integer>> preMap = new HashMap<>();
     Set<Integer> visited = new HashSet<>();
     Set<Integer> cycle = new HashSet<>();
     List<Integer> linkedList = new LinkedList<>();
     for(int i=0;i<numCourses;i++){
         preMap.put(i,new ArrayList<>());
     }   
     for(int i=0;i<prerequisites.length;i++){
         preMap.get(prerequisites[i][0]).add(prerequisites[i][1]);
     }
     for(int course=0;course<numCourses;course++){
         if(!dfs(course,preMap,visited,cycle,linkedList)){
             return new int[]{};
         }
     }
     int[] result = new int[linkedList.size()];
     int i=0;
     for(int num:linkedList){
         result[i]=num;
         i++;
     }
     return result;
    }
    private boolean dfs(int course,Map<Integer,List<Integer>> preMap,Set<Integer> visited,Set<Integer> cycle,List<Integer> list){
        if(cycle.contains(course)){
            return false;
        }
        if(visited.contains(course)){
            return true;
        }
        cycle.add(course);
        for(int pre:preMap.get(course)){
            if(!dfs(pre,preMap,visited,cycle,list)){
                return false;
            }
        }
        cycle.remove(course);
        visited.add(course);
        list.add(course);
        return true;
    }
}



class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        boolean isPossible = true;
        Map<Integer,List<Integer>> adjList = new HashMap<>();
        int[] indegree = new int[numCourses];
        int[] topologicalOrder = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            adjList.put(i,new ArrayList<>());
        }
        for(int[] pre:prerequisites){
            int dest = pre[0];
            int src = pre[1];
            adjList.get(src).add(dest);
            indegree[dest] +=1;
        }

        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int i=0;
        while(!q.isEmpty()){
            int course = q.poll();
            topologicalOrder[i++] = course;
            for(int neigbhour:adjList.getOrDefault(course,new ArrayList<>())){
                indegree[neigbhour]--;
                if(indegree[neigbhour]==0){
                    q.add(neigbhour);
                }
            }
        }
        if(i==numCourses){
            return topologicalOrder;
        }
        return new int[]{};
    }
}

Complexity Analysis
* Time Complexity: O(V+E) where V represents the number of vertices and E represents the number of edges. We pop each node exactly once from the zero in-degree queue and that gives us V. Also, for each vertex, we iterate over its adjacency list and in totality, we iterate over all the edges in the graph which gives us E. Hence, O(V+E)
* Space Complexity: O(V+E). The in-degree array requires O(V) space. We use an intermediate queue data structure to keep all the nodes with 0 in-degree. In the worst case, there won't be any prerequisite relationship and the queue will contain all the vertices initially since all of them will have 0 in-degree. That gives us O(V). Additionally, we also use the adjacency list to represent our graph initially. The space occupied is defined by the number of edges because for each node as the key, we have all its adjacent nodes in the form of a list as the value. Hence, O(E). So, the overall space complexity is O(V+E).
