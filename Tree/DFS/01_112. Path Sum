112. Path Sum

URL: https://leetcode.com/problems/path-sum/description/



Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 
Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.

Example 2:

Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.

 
Constraints:

	The number of nodes in the tree is in the range [0, 5000].
	-1000 <= Node.val <= 1000
	-1000 <= targetSum <= 1000



Approach:
Recursive call method
1. if root is null return false as for empty tree path is not possible till leaf.
2. update targetSum.
3. if childs of current node is null, return 
4. recursive call for left and right child with updated target


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null){
            return false;
        }
        targetSum=targetSum-root.val;
        if((root.left==null)&&root.right==null){
            return targetSum==0;
        }
        return hasPathSum(root.left,targetSum) || hasPathSum(root.right,targetSum);
    }
   
}

Complexity Analysis
* Time complexity : we visit each node exactly once, thus the time complexity is O(N), where N is the number of nodes.
* Space complexity : in the worst case, the tree is completely unbalanced, e.g. each node has only one child node, the recursion call would occur N times (the height of the tree), therefore the storage to keep the call stack would be O(N). But in the best case (the tree is completely balanced), the height of the tree would be log(N). Therefore, the space complexity in this case would be O(log(N)).




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null){
            return false;
        }
        LinkedList<TreeNode> node_stack = new LinkedList<>();
        LinkedList<Integer> sum_stack = new LinkedList<>();
        node_stack.add(root);
        sum_stack.add(targetSum-root.val);

        TreeNode node;
        int curr_sum;
        while(!node_stack.isEmpty()){
            node = node_stack.pollLast();
            curr_sum = sum_stack.pollLast();
            if(
                (node.right==null) && (node.left==null) && (curr_sum==0)
            ) return true;

            if(node.right!=null){
                node_stack.add(node.right);
                sum_stack.add(curr_sum-node.right.val);
            }
            if(node.left!=null){
                node_stack.add(node.left);
                sum_stack.add(curr_sum-node.left.val);
            }
        }
        return false;
    }
}


Complexity Analysis
* Time complexity: the same as the recursion approach O(N).
* Space complexity: O(N) since in the worst case, when the tree is completely unbalanced, e.g. each node has only one child node, we would keep all N nodes in the stack. But in the best case (the tree is balanced), the height of the tree would be log(N). Therefore, the space complexity in this case would be O(log(N)).
