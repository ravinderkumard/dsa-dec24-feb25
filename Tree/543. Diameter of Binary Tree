URL: https://leetcode.com/problems/diameter-of-binary-tree/description/

543. Diameter of Binary Tree

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 
Example 1:

Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:

Input: root = [1,2]
Output: 1

 
Constraints:

	The number of nodes in the tree is in the range [1, 104].
	-100 <= Node.val <= 100

Algorithm

Initalize an integer variable diameter to keep track of the longest path we find from the DFS.
Implement a recursive function longestPath which takes a TreeNode as input. It should recursively explore the entire tree rooted at the given node. Once it's finished, it should return the longest path out of its left and right branches:
  if node is None, we have reached the end of the tree, hence we should return 0;
  we want to recursively explore node's children, so we call longestPath again with node's left and right children. In return, we get the longest path of its left and right children leftPath and rightPath;
  if leftPath plus rightPath is longer than the current longest diameter found, then we need to update diameter;
  finally, we return the longer one of leftPath and rightPath. Remember to add 1 as the edge connecting it with its parent.
Call longestPath with root.


class Solution {
    int dist = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        dist = 0;
        dfs(root);
        return dist;
    }
    private int dfs(TreeNode root){
        if(root==null){
            return 0;
        }
        int left = dfs(root.left);
        int right = dfs(root.right);
        dist = Math.max(dist,left+right);
        return 1+Math.max(left,right);

    }
}

Complexity Analysis
Let N be the number of nodes in the tree.
Time complexity: O(N). This is because in our recursion function longestPath, we only enter and exit from each node once. We know this because each node is entered from its parent, and in a tree, nodes only have one parent.
Space complexity: O(N). The space complexity depends on the size of our implicit call stack during our DFS, which relates to the height of the tree. In the worst case, the tree is skewed so the height of the tree is O(N). If the tree is balanced, it'd be O(logN).
