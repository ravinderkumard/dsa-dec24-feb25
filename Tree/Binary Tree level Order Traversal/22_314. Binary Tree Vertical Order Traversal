314. Binary Tree Vertical Order Traversal

URL: https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/



Given the root of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]

Example 2:

Input: root = [3,9,8,4,0,1,7]
Output: [[4],[9],[3,0,1],[8],[7]]

Example 3:

Input: root = [1,2,3,4,10,9,11,null,5,null,null,null,null,null,null,null,6]
Output: [[4],[2,5],[1,10,9,6],[3],[11]]

 
Constraints:

	The number of nodes in the tree is in the range [0, 100].
	-100 <= Node.val <= 100




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Map<Integer,ArrayList> columnTable = new HashMap<>();
        Queue<Pair<TreeNode,Integer>> queue = new LinkedList<>();
        int column = 0;
        queue.offer(new Pair(root,column));
        while(!queue.isEmpty()){
            Pair<TreeNode,Integer> p = queue.poll();
            root = p.getKey();
            column = p.getValue();

            if(root!=null){
                columnTable.putIfAbsent(column, new ArrayList<>());
                columnTable.get(column).add(root.val);

                queue.offer(new Pair(root.left,column-1));
                queue.offer(new Pair(root.right,column+1));
            }
        }
        
        List<Integer> sortedKeys = new ArrayList<Integer>(columnTable.keySet());
        Collections.sort(sortedKeys);
        
        for(int k :sortedKeys){
            result.add(columnTable.get(k));
        }
        return result;
    }
}

Complexity Analysis
* Time Complexity: O(NlogN) where N is the number of nodes in the tree. In the first part of the algorithm, we do the BFS traversal, whose time complexity is O(N) since we traversed each node once and only once. In the second part, in order to return the ordered results, we then sort the obtained hash table by its keys, which could result in the O(NlogN) time complexity in the worst case scenario where the binary tree is extremely imbalanced (for instance, each node has only left child node.) As a result, the overall time complexity of the algorithm would be O(NlogN).
* Space Complexity: O(N) where N is the number of nodes in the tree. First of all, we use a hash table to group the nodes with the same column index. The hash table consists of keys and values. In any case, the values would consume O(N) memory. While the space for the keys could vary, in the worst case, each node has a unique column index, i.e. there would be as many keys as the values. Hence, the total space complexity for the hash table would still be O(N). During the BFS traversal, we use a queue data structure to keep track of the next nodes to visit. At any given moment, the queue would hold no more two levels of nodes. For a binary tree, the maximum number of nodes at a level would be 
•	2  N+1	•
•	
	•	 which is also the number of leafs in a full binary tree. As a result, in the worst case, our queue would consume at most O(
	
	
	•	⋅2)=O(N) space. Lastly, we also need some space to hold the results, which is basically a reordered hash table of size O(N) as we discussed before. To sum up, the overall space complexity of our algorithm would be O(N).






Solution 2: BFS without Sorting
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Map<Integer,ArrayList> columnTable = new HashMap<>();
        Queue<Pair<TreeNode,Integer>> queue = new LinkedList<>();
        int column = 0;
        queue.offer(new Pair(root,column));
        int minColumn = Integer.MAX_VALUE;
        int maxColumn = Integer.MIN_VALUE;
        while(!queue.isEmpty()){
            Pair<TreeNode,Integer> p = queue.poll();
            root = p.getKey();
            column = p.getValue();
            minColumn = Math.min(minColumn,column);
            maxColumn = Math.max(maxColumn,column);
            if(root!=null){
                columnTable.putIfAbsent(column, new ArrayList<>());
                columnTable.get(column).add(root.val);

                queue.offer(new Pair(root.left,column-1));
                queue.offer(new Pair(root.right,column+1));
            }
        }
        for(int i=minColumn;i<=maxColumn;i++){
            if(columnTable.get(i)!=null)
                result.add(columnTable.get(i));
        }
        // List<Integer> sortedKeys = new ArrayList<Integer>(columnTable.keySet());
        // Collections.sort(sortedKeys);
        
        // for(int k :sortedKeys){
        //     result.add(columnTable.get(k));
        // }
        return result;
    }
}

Complexity Analysis
* Time Complexity: O(N) where N is the number of nodes in the tree.   Following the same analysis in the previous BFS approach, the only difference is that this time we don't need the costy sorting operation (i.e. O(NlogN)).
* Space Complexity: O(N) where N is the number of nodes in the tree. The analysis follows the same logic as in the previous BFS approach.






3. DFS
class Solution {
    Map<Integer,ArrayList<Pair<Integer,Integer>>> columnTable = new HashMap<>();
    int minColumn = 0,maxColumn = 0;
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> output = new ArrayList<>();
        if(root==null){
            return output;
        }
        dfs(root,0,0);
        for(int i=minColumn;i<=maxColumn;i++){
            Collections.sort(columnTable.get(i),(a,b)->a.getKey()-b.getKey());
            List<Integer> sortedColumn = new ArrayList<>();
            for(Pair<Integer,Integer> p:columnTable.get(i)){
                sortedColumn.add(p.getValue());
            }
            output.add(sortedColumn);
        }
        return output;
    }

    private void dfs(TreeNode node,Integer row,Integer column){
        if(node==null){
            return;
        }
        
        this.columnTable.putIfAbsent(column,new ArrayList<Pair<Integer,Integer>>());
        
        this.columnTable.get(column).add(new Pair<Integer,Integer>(row,node.val));
        this.minColumn = Math.min(minColumn,column);
        this.maxColumn = Math.max(maxColumn,column);
        dfs(node.left,row+1,column-1);
        dfs(node.right,row+1,column+1);
    }
}

Time Complexity: O(W⋅HlogH)) where W is the width of the binary tree (i.e. the number of columns in the result) and H is the height of the tree.

Space Complexity: O(N) where N is the number of nodes in the tree.
