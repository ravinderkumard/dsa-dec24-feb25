107. Binary Tree Level Order Traversal II
URL: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/



Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. 
(i.e., from left to right, level by level from leaf to root).

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 
Constraints:

	The number of nodes in the tree is in the range [0, 2000].
	-1000 <= Node.val <= 1000







class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> que = new LinkedList<>();
        if(root==null){
            return result;
        }
        que.add(root);
        LinkedList<LinkedList<Integer>> list = new LinkedList<>();
        while(!que.isEmpty()){
            int size = que.size();
            List<Integer> currList = new ArrayList<>();
            while(size>0){
                size--;
                TreeNode curr = que.poll();
                currList.add(curr.val);
                if(curr.left!=null){
                    que.add(curr.left);
                }
                if(curr.right!=null){
                    que.add(curr.right);
                }
            }   
            list.offerFirst(new LinkedList<>(currList));
        }
        return new ArrayList<>(list);
    }
}





Solution 2:
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new LinkedList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            List<Integer> currLevel = new ArrayList<>();
            int size = queue.size();
            while(size>0){
                TreeNode node = queue.poll();
                currLevel.add(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
                size--;
            }
            result.addFirst(currLevel);
        }
        return result;
    }
}



Solution 3:
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        dfs(root,0);
        Collections.reverse(result);
        return result;
    }
    private void dfs(TreeNode root,int level){
        if(root==null){
            return;
        }
        if(result.size()<=level){
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
}
