1302. Deepest Leaves Sum


Medium

Companies
Given the root of a binary tree, return the sum of values of its deepest leaves.
 
Example 1:
￼
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
Example 2:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 
Constraints:
* The number of nodes in the tree is in the range [1, 104].
* 1 <= Node.val <= 100
* 

Solution 1: BFS
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        //Sum of Last level
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int sum = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            sum = 0;
            while(size-->0){
                TreeNode node = queue.poll();
                sum+=node.val;
                if(node.left!=null)
                    queue.add(node.left);
                if(node.right!=null)
                    queue.add(node.right);
            }
        }
        return sum;
    }
}

Solution 2: DFS
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        int depth = depth(root);
        return dfs(root,depth,1,0);
    }
    int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        return Math.max(depth(root.left),depth(root.right))+1;
    }
    public int dfs(TreeNode root, int depth, int level, int sum){
        if(root==null){
            return 0;
        }
        if(depth==level){
            sum+=root.val;
            return sum;
        }
        return dfs(root.left,depth,level+1,sum)+dfs(root.right,depth,level+1,sum);
    }
}

Solution 3: BFS Optimised
class Solution {
    public int deepestLeavesSum(TreeNode root) {
        ArrayDeque<TreeNode> nextLevel = new ArrayDeque<>();
        ArrayDeque<TreeNode> currLevel = new ArrayDeque<>();
        nextLevel.offer(root);
        while(!nextLevel.isEmpty()){
            currLevel = nextLevel.clone();
            nextLevel.clear();
            for(TreeNode node:currLevel){
                if(node.left!=null){
                    nextLevel.add(node.left);
                }
                if(node.right!=null){
                    nextLevel.offer(node.right);
                }
            }
        }
        int sum = 0;
        for(TreeNode node: currLevel){
            sum+=node.val;
        }
        return sum;
    }
}

Complexity Analysis
* Time complexity: O(N) since one has to visit each node.
* Space complexity: up to O(N) to keep the queues. 

