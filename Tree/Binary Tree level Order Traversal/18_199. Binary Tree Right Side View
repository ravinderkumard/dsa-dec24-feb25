
199. Binary Tree Right Side View

URL: https://leetcode.com/problems/binary-tree-right-side-view/description/

Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 
Example 1:

Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:

Input: root = [1,null,3]
Output: [1,3]

Example 3:

Input: root = []
Output: []

 
Constraints:

	The number of nodes in the tree is in the range [0, 100].
	-100 <= Node.val <= 100


BFS


class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            LinkedList<Integer> record = new LinkedList<Integer>();
            int size = queue.size();
            while(size>0){
                TreeNode node = queue.poll();
                record.addFirst(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
                size--;
            }
            result.add(record.getFirst());
        }
        return result;
    }
}



class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
           
            int size = queue.size();
            TreeNode node = null;
            while(size>0){
                node = queue.poll();
               
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
                size--;
            }
            result.add(node.val);
        }
        return result;
    }
}



class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root==null){
            return result;
        }
        bfs(root,result);
        return result;
    }
    private void bfs(TreeNode root,List<Integer> result){
        Queue<TreeNode> que = new LinkedList<>();
        que.add(root);
        while(!que.isEmpty()){
            int size = que.size();
            TreeNode currLevel = null;
            while(size!=0){
                currLevel = que.poll();
                if(currLevel.left!=null){
                    que.offer(currLevel.left);
                }
                if(currLevel.right!=null){
                    que.offer(currLevel.right);
                }
                size--;
            }
            if(currLevel!=null)
                result.add(currLevel.val);
        }
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> rightSide = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        if(root==null) return rightSide;
        helper(root,0);
        return rightSide;
    }
    private void helper(TreeNode root,int level){
        if(rightSide.size()==level){
            rightSide.add(root.val);
        }
        
        if(root.right!=null){
            helper(root.right,level+1);
        }
        if(root.left!=null){
            helper(root.left,level+1);
        }
    }
}




class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        right(root,result,0);
        return result;
    }
    private void right(TreeNode root,List<Integer> result,int level){
        if(root==null){
            return;
        }
        if(level==result.size()){
            result.add(root.val);
        }
        right(root.right,result,level+1);
        right(root.left,result,level+1);
    }
}
