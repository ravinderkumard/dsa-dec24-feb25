5. Nodes at Each Level with Indices
Problem: Perform level-order traversal but return each node along with its index.
Example Output: [[3], [(9, 0), (20, 1)], [(15, 0), (7, 1)]]




class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        List<List<int[]>> pairResult = new ArrayList<>();
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            List<int[]> recordPair = new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                recordPair.add(new int[]{node.val,i});
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            result.add(list);
            pairResult.add(recordPair);
        }
        // for(List<int[]> pair: pairResult){
        //     for(int[] p:pair){
        //         if(p.length==1){
        //             System.out.println("("+p[0]+")");
        //         } else {
        //             System.out.println("("+p[0]+","+p[1]+")");
        //         }
        //     }
        // }
        return result;
    }

}
