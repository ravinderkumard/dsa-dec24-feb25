URL: https://leetcode.com/problems/binary-tree-level-order-traversal/description/

102. Binary Tree Level Order Traversal

Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:

Input: root = [1]
Output: [[1]]

Example 3:

Input: root = []
Output: []

 
Constraints:

	The number of nodes in the tree is in the range [0, 2000].
	-1000 <= Node.val <= 1000


Approach 1: DFS.
1. Perform PreOrder traversal of the tree and during traversal add element to the list of that level.
2. First check if result array size is equal to level if Yes, insert an empty list at that level.
3. During preorer traversal add elemnt to that level and make recursive call for the child of current node with level+1.

Approach 2: BFS.
1. Define an empty queue and add root to it.
2. Iterate untill que is not empty.
3. Detemine the current size of the queue and iterate untill size become 0, i.e. we have processed all the element for that level.
4. Add current array to put all the currently parsed elements.
5. if left and right child of current node is not empty ad them to the queue.

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null){
            return result;
        }
        helper(root,0);
        return result;
    }
    private void helper(TreeNode root,int level){
        if(result.size()==level){
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        if(root.left!=null){
            helper(root.left,level+1);
        }
        if(root.right!=null){
            helper(root.right,level+1);
        }
    }
}

Complexity Analysis
Time complexity: O(N) since each node is processed exactly once.
Space complexity: O(N) to keep the output structure which contains N node values.



Solution 2:
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> levels = new ArrayList<>();
        if(root==null){
            return levels;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int level = 0;
        while(!queue.isEmpty()){
            levels.add(new ArrayList<>());
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                levels.get(level).add(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            level++;
        }
        return levels;
    }
}

Complexity Analysis
Time complexity: O(N) since each node is processed exactly once.
Space complexity: O(N) to keep the output structure which contains N node values.


Solution 3:
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(root==null){
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            result.add(list);
            
        }
        
        return result;
    }

}
