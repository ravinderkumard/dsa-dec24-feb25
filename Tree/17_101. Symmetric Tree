101. Symmetric Tree

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?

Approach:
1. Check if both the nodes are null return true this is a valid tree.
2. Check if either of the node is null return false this is invalid tree.
3. Invoke mirror image method and add left value !=right value return false along with above 2 condition, 
4. further invoke left.left and right right and left right with right left.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null){
            return true;
        }
        if(root.left==null && root.right==null){
            return true;
        }
        if(root.left==null||root.right==null){
            return false;
        }
        return isMirrorImage(root.left,root.right);
    }
    private boolean isMirrorImage(TreeNode left,TreeNode right){
        if(left==null && right==null){
            return true;
        }
        if(left==null||right==null){
            return false;
        }
        if(left.val != right.val){
            return false;
        }
        return isMirrorImage(left.left,right.right) && isMirrorImage(left.right, right.left);
    }
}
