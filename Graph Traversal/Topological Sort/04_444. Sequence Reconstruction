444. Sequence Reconstruction

URL: https://leetcode.com/problems/sequence-reconstruction/description/

444. Sequence Reconstruction

You are given an integer array nums of length n where nums is a permutation of the integers in the range [1, n]. You are also given a 2D integer array sequences where sequences[i] is a subsequence of nums.

Check if nums is the shortest possible and the only supersequence. The shortest supersequence is a sequence with the shortest length and has all sequences[i] as subsequences. There could be multiple valid supersequences for the given array sequences.

	For example, for sequences = [[1,2],[1,3]], there are two shortest supersequences, [1,2,3] and [1,3,2].
	While for sequences = [[1,2],[1,3],[1,2,3]], the only shortest supersequence possible is [1,2,3]. [1,2,3,4] is a possible supersequence but not the shortest.

Return true if nums is the only shortest supersequence for sequences, or false otherwise.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 
Example 1:

Input: nums = [1,2,3], sequences = [[1,2],[1,3]]
Output: false
Explanation: There are two possible supersequences: [1,2,3] and [1,3,2].
The sequence [1,2] is a subsequence of both: [1,2,3] and [1,3,2].
The sequence [1,3] is a subsequence of both: [1,2,3] and [1,3,2].
Since nums is not the only shortest supersequence, we return false.

Example 2:

Input: nums = [1,2,3], sequences = [[1,2]]
Output: false
Explanation: The shortest possible supersequence is [1,2].
The sequence [1,2] is a subsequence of it: [1,2].
Since nums is not the shortest supersequence, we return false.

Example 3:

Input: nums = [1,2,3], sequences = [[1,2],[1,3],[2,3]]
Output: true
Explanation: The shortest possible supersequence is [1,2,3].
The sequence [1,2] is a subsequence of it: [1,2,3].
The sequence [1,3] is a subsequence of it: [1,2,3].
The sequence [2,3] is a subsequence of it: [1,2,3].
Since nums is the only shortest supersequence, we return true.

 
Constraints:

	n == nums.length
	1 <= n <= 104
	nums is a permutation of all the integers in the range [1, n].
	1 <= sequences.length <= 104
	1 <= sequences[i].length <= 104
	1 <= sum(sequences[i].length) <= 105
	1 <= sequences[i][j] <= n
	All the arrays of sequences are unique.
	sequences[i] is a subsequence of nums.


******************************************************************************************************
NOTES:
1. Problem Summary
	You are given:
	*. A sequence org (original sequence).
	*. A list of subsequences seqs.
The task is to determine whether the sequence org can be uniquely reconstructed from seqs. The reconstruction is valid if:
	*. It is the only possible sequence.
	*. It matches the given org.


How to Decide the Approach
The problem can be solved using Topological Sorting because it involves verifying the uniqueness of the order, 
which aligns well with detecting valid linear orders in a Directed Acyclic Graph (DAG).


Here are the steps to decide the approach:
1. Understand the Problem Requirements
	Dependencies Between Elements: Each subsequence defines an order of dependencies between the elements.
		For example, seqs = [[1, 2], [1, 3]] means 1 → 2 and 1 → 3 in the graph.
	Unique Topological Sort: To ensure the sequence is uniquely reconstructible:
		At each step in the topological sort, there must be exactly one valid node 
		(zero in-degree node) to process.


2. Decide Between Approaches
The two main approaches for solving this problem are:

	(A) Topological Sort (Kahn’s Algorithm)
	When to Use: If the problem involves verifying order dependencies and ensuring uniqueness.
	Why It Works:
		It processes nodes in a graph level by level, using the in-degree array to enforce constraints.
		Ensures uniqueness by verifying that there is exactly one valid node to process at each step.
	
	Steps:
	1. Build a graph and an in-degree array from seqs.
	2. Use a queue to process nodes with zero in-degree.
	3. Ensure that there is at most one valid order:
	4. If the queue contains more than one element at any point, the sequence is not uniquely reconstructible.
	5. Compare the reconstructed order with org.

	(B) DFS-Based Cycle Detection
	When to Use: If the problem is more about cycle detection and less about verifying uniqueness.
	Why It Works:
		A valid topological order exists only if the graph is acyclic.
		However, this approach doesn't easily check for uniqueness, so it's less preferred for this problem.


3. Key Observations
Empty or Invalid Input: If seqs is empty or does not cover all elements in org, the answer is false.
Cycle Detection: If there’s a cycle in the graph, reconstruction is impossible.
Uniqueness: Use Kahn’s algorithm to verify that there’s only one valid topological order.
******************************************************************************************************




class Solution {
    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {
        int n = nums.length;
        int[] inDegree = new int[n+1];
        List<List<Integer>> graph = new ArrayList<>();
        for(int listSize = 0;listSize<=n;listSize++){
            graph.add(new ArrayList<>());
        }
        for(List<Integer> seq :sequences){
            for(int index=1;index<seq.size();index++){
                int nodeA = seq.get(index-1);
                int nodeB = seq.get(index);
                if(nodeA<1||nodeA>n||nodeB<1||nodeB>n) return false;

                graph.get(nodeA).add(nodeB);
                inDegree[nodeB]++;
            }
        }
        Queue<Integer> topSort = new LinkedList<>();
        for(int node =1;node<=n;node++){
            if(inDegree[node]==0){
                topSort.offer(node);
            }
        }
        for(int index=0;index<n;index++){
            if(topSort.size()>1||nums[index]!=topSort.peek()){
                return false;
            }
            int curr = topSort.poll();
            for(int next:graph.get(curr)){
                inDegree[next]--;
                if(inDegree[next]==0){
                    topSort.offer(next);
                }
            }
        }
        return true;
    }
}


class Solution {
    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {
        int n = nums.length;
        List<Integer>[] g = new List[n + 1];
        int[] indegree = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (List<Integer> se : sequences) {
            int len = se.size();
            for (int i = 1; i < len; i++) {
                g[se.get(i - 1)].add(se.get(i));
                indegree[se.get(i)]++;
            }
        }
        List<Integer> list = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        for (int i = 1; i <= n; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }
        while (!q.isEmpty()) {
            int len = q.size();
            if (len != 1) {
                return false;
            }
            int cur = q.poll();
            list.add(cur);
            for (int next : g[cur]) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    q.offer(next);
                }
            }
        }
        if (nums.length != list.size()) return false;
        for (int i = 0; i < n; i++) {
            if (nums[i] != list.get(i)) {
                return false;
            }
        }
        return true;
    }
}






import java.util.*;

public class SequenceReconstruction {
    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {
        // Step 1: Build the graph and in-degree array
        Map<Integer, List<Integer>> graph = new HashMap<>();
        Map<Integer, Integer> inDegree = new HashMap<>();
        
        for (int num : org) {
            graph.put(num, new ArrayList<>());
            inDegree.put(num, 0);
        }
        
        int n = org.length;
        boolean validInput = false;
        
        for (List<Integer> seq : seqs) {
            for (int num : seq) {
                if (!graph.containsKey(num)) return false; // Invalid number in seq
                validInput = true;
            }
            
            for (int i = 0; i < seq.size() - 1; i++) {
                int from = seq.get(i), to = seq.get(i + 1);
                graph.get(from).add(to);
                inDegree.put(to, inDegree.get(to) + 1);
            }
        }
        
        if (!validInput) return false; // seqs is empty or invalid
        
        // Step 2: Initialize queue with nodes having in-degree 0
        Queue<Integer> queue = new LinkedList<>();
        for (int key : inDegree.keySet()) {
            if (inDegree.get(key) == 0) {
                queue.offer(key);
            }
        }
        
        // Step 3: Perform Kahn's Algorithm and ensure uniqueness
        List<Integer> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            if (queue.size() > 1) return false; // More than one valid order
            
            int current = queue.poll();
            result.add(current);
            
            for (int neighbor : graph.get(current)) {
                inDegree.put(neighbor, inDegree.get(neighbor) - 1);
                if (inDegree.get(neighbor) == 0) {
                    queue.offer(neighbor);
                }
            }
        }
        
        // Step 4: Check if reconstructed order matches `org`
        return result.size() == n && Arrays.equals(result.stream().mapToInt(i -> i).toArray(), org);
    }
    
    public static void main(String[] args) {
        SequenceReconstruction sr = new SequenceReconstruction();
        int[] org = {1, 2, 3};
        List<List<Integer>> seqs = Arrays.asList(
            Arrays.asList(1, 2), 
            Arrays.asList(1, 3),
            Arrays.asList(2, 3)
        );
        System.out.println(sr.sequenceReconstruction(org, seqs)); // Output: true
    }
}
