URL: https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies/description/

2115. Find All Possible Recipes from Given Supplies

You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.

You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.

Return a list of all the recipes that you can create. You may return the answer in any order.

Note that two recipes may contain each other in their ingredients.

 
Example 1:

Input: recipes = ["bread"], ingredients = [["yeast","flour"]], supplies = ["yeast","flour","corn"]
Output: ["bread"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".

Example 2:

Input: recipes = ["bread","sandwich"], ingredients = [["yeast","flour"],["bread","meat"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".

Example 3:

Input: recipes = ["bread","sandwich","burger"], ingredients = [["yeast","flour"],["bread","meat"],["sandwich","meat","bread"]], supplies = ["yeast","flour","meat"]
Output: ["bread","sandwich","burger"]
Explanation:
We can create "bread" since we have the ingredients "yeast" and "flour".
We can create "sandwich" since we have the ingredient "meat" and can create the ingredient "bread".
We can create "burger" since we have the ingredient "meat" and can create the ingredients "bread" and "sandwich".

 
Constraints:

	n == recipes.length == ingredients.length
	1 <= n <= 100
	1 <= ingredients[i].length, supplies.length <= 100
	1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10
	recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.
	All the values of recipes and supplies combined are unique.
	Each ingredients[i] does not contain any duplicate values.



Problem Statement
You are given:
1. A list of recipes, where each recipe can be prepared only if all its ingredients are available.
2. A list of ingredients required for each recipe.
3. A list of initial supplies, representing the ingredients you already have.
Return a list of all recipes you can create. The recipes must follow a dependency chain (i.e., you can only make a recipe if all its required ingredients are available, which could involve making other recipes first).



How to Decide if Topological Sort Applies
This problem is naturally a dependency resolution problem, which is a classic use case for topological sorting. Here’s why:
1. Dependency Graph:
    * Each recipe depends on its ingredients, which may include other recipes.
    * This can be modeled as a directed graph, where:
        * Nodes represent recipes and supplies.
        * An edge u → v means v depends on u.
2. Cycle Detection:
    * If there is a cycle in the graph (e.g., recipe1 → recipe2 → recipe1), then it's impossible to make the recipes involved in the cycle.
    * Topological sorting handles cycle detection inherently.
3. Order of Preparation:
    * Recipes must be processed in an order such that all dependencies (ingredients) are satisfied before making the recipe.
Thus, this problem fits perfectly into the topological sort framework.




Approach
Step 1: Represent the Problem as a Graph
* Treat each recipe and supply as a node.
* For each recipe:
    * Add an edge from each ingredient (node) to the recipe (node).
    * Maintain an in-degree array to track how many dependencies each recipe has.
Step 2: Perform Topological Sort
* Use Kahn's Algorithm:
    * Start with nodes that have an in-degree of 0 (these are supplies or recipes with no unmet dependencies).
    * Gradually reduce the in-degree of dependent recipes as their ingredients are processed.
    * If a recipe's in-degree becomes 0, add it to the queue and mark it as "processable."
Step 3: Collect All Valid Recipes
* If a recipe is processed (i.e., its in-degree becomes 0), add it to the result.





import java.util.*;

public class RecipeFinder {
    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {
        // Step 1: Build the graph and in-degree array
        Map<String, List<String>> graph = new HashMap<>();
        Map<String, Integer> inDegree = new HashMap<>();
        
        // Initialize in-degree for all recipes and supplies
        for (String recipe : recipes) {
            inDegree.put(recipe, 0);
        }
        for (String supply : supplies) {
            inDegree.put(supply, 0); // Supplies start with in-degree 0
        }
        
        // Build graph edges based on dependencies
        for (int i = 0; i < recipes.length; i++) {
            String recipe = recipes[i];
            List<String> recipeIngredients = ingredients.get(i);
            for (String ingredient : recipeIngredients) {
                graph.putIfAbsent(ingredient, new ArrayList<>());
                graph.get(ingredient).add(recipe);
                inDegree.put(recipe, inDegree.getOrDefault(recipe, 0) + 1);
            }
        }

        // Step 2: Topological Sort using Kahn's Algorithm
        Queue<String> queue = new LinkedList<>();
        for (String node : inDegree.keySet()) {
            if (inDegree.get(node) == 0) {
                queue.offer(node);
            }
        }

        List<String> result = new ArrayList<>();
        while (!queue.isEmpty()) {
            String current = queue.poll();
            // Only add recipes to the result
            if (Arrays.asList(recipes).contains(current)) {
                result.add(current);
            }

            if (graph.containsKey(current)) {
                for (String neighbor : graph.get(current)) {
                    inDegree.put(neighbor, inDegree.get(neighbor) - 1);
                    if (inDegree.get(neighbor) == 0) {
                        queue.offer(neighbor);
                    }
                }
            }
        }

        return result;
    }

    public static void main(String[] args) {
        RecipeFinder finder = new RecipeFinder();

        String[] recipes = {"bread", "sandwich", "burger"};
        List<List<String>> ingredients = Arrays.asList(
            Arrays.asList("flour", "water"),
            Arrays.asList("bread", "meat"),
            Arrays.asList("sandwich", "lettuce")
        );
        String[] supplies = {"flour", "water", "meat", "lettuce"};

        System.out.println(finder.findAllRecipes(recipes, ingredients, supplies));
        // Output: ["bread", "sandwich", "burger"]
    }
}


Complexity Analysis
1. Time Complexity:
    * Graph Construction: O(V+E), where V is the total number of nodes (recipes + supplies) and E is the number of edges (dependencies).
    * Topological Sort: O(V+E).
    * Total: O(V+E).
2. Space Complexity:
    * O(V+E) for the graph and in-degree data structures.
    * O(V) for the queue.



