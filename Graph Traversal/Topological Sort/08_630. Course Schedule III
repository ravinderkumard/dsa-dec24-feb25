URL: https://leetcode.com/problems/course-schedule-iii/description/

630. Course Schedule III

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

	For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 
Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]

 
Constraints:

	1 <= numCourses <= 2000
	0 <= prerequisites.length <= numCourses * (numCourses - 1)
	prerequisites[i].length == 2
	0 <= ai, bi < numCourses
	ai != bi
	All the pairs [ai, bi] are distinct.




class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]);
        
        return schedule(courses,0,0);
    }
    private int schedule(int[][] courses,int i,int time){
        if(i==courses.length){
            return 0;
        }
        
        int taken = 0;
        if(time+courses[i][0]<=courses[i][1]){
            taken=1+schedule(courses,i+1,time+courses[i][0]);
        }
        int notTaken = schedule(courses,i+1,time);
        return Math.max(taken,notTaken);
    }
}

TLE Solution


Optimised with memoization

class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]);
        Integer[][] memo = new Integer[courses.length][courses[courses.length-1][1]+1];
        return schedule(courses,0,0,memo);
    }
    private int schedule(int[][] courses,int i,int time,Integer[][] memo){
        if(i==courses.length){
            return 0;
        }
        if(memo[i][time]!=null){
            return memo[i][time];
        }
        int taken = 0;
        if(time+courses[i][0]<=courses[i][1]){
            taken=1+schedule(courses,i+1,time+courses[i][0],memo);
        }
        int notTaken = schedule(courses,i+1,time,memo);
        memo[i][time] = Math.max(taken,notTaken);
        return memo[i][time];
    }
}
Memory limit exceed

Complexity Analysis
* Time complexity : O(n∗d). memo array of size nxd is filled once. Here, n refers to the number of courses in the given courses array and d refers to the maximum value of the end day from all the end days in the courses array.
* Space complexity : O(n∗d). memo array of size nxd is used.





class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]);
        int time = 0,count = 0;
        for(int i=0;i<courses.length;i++){
            if(time+courses[i][0]<=courses[i][1]){
                time+=courses[i][0];
                count++;
            } else {
                int max_i = i;
                for(int j=0;j<i;j++){
                    if(courses[j][0]>courses[max_i][0]){
                        max_i = j;
                    }
                }
                if(courses[max_i][0]>courses[i][0]){
                    time+=courses[i][0]-courses[max_i][0];
                }
                courses[max_i][0] = -1;
            }
        }
        return count;
    }
}

Complexity Analysis
* Time complexity : O(n^2). We iterate over the count array of size n once. For every element currently considered, we could scan backwards till the first element, giving O(n^2) complexity. Sorting the count array takes O(nlogn) time for count array.
* Space complexity : O(1). Constant extra space is used.



class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]);
        int time = 0,count = 0;
        for(int i=0;i<courses.length;i++){
            if(time+courses[i][0]<=courses[i][1]){
                time+=courses[i][0];

                courses[count++] = courses[i];
            } else {
                int max_i = i;
                for(int j=0;j<count;j++){
                    if(courses[j][0]>courses[max_i][0]){
                        max_i = j;
                    }
                }
                if(courses[max_i][0]>courses[i][0]){
                    time+=courses[i][0]-courses[max_i][0];
                    courses[max_i] = courses[i];
                }
                
            }
        }
        return count;
    }
}

Complexity Analysis
* Time complexity : O(n∗count). We iterate over a total of n elements of the courses array. For every element, we can traverse backwards upto at most count(final value) number of elements.
* Space complexity : O(1). Constant extra space is used.





Best Solution

class Solution {
    public int scheduleCourse(int[][] courses) {
        Arrays.sort(courses,(a,b)->a[1]-b[1]);
        PriorityQueue<Integer> queue = new PriorityQueue<>((a,b)->b-a);
        int time = 0;
        for(int[] c:courses){
            if(time+c[0]<=c[1]){
                queue.offer(c[0]);
                time+=c[0];
            } else if(!queue.isEmpty() && queue.peek()>c[0]){
                time+=c[0]-queue.poll();
                queue.offer(c[0]);
            }
        }
        return queue.size();
    }
}

Complexity Analysis
* Time complexity : O(nlogn). At most n elements are added to the queue. Adding each element is followed by heapification, which takes O(logn) time.
* Space complexity : O(n). The queue containing the durations of the courses taken can have at most n elements

