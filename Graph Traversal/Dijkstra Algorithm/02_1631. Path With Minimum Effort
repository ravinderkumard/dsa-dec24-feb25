URL: https://leetcode.com/problems/path-with-minimum-effort/description/

1631. Path With Minimum Effort

You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 
Example 1:

Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.

Example 2:

Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].

Example 3:

Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.

 
Constraints:

	rows == heights.length
	columns == heights[i].length
	1 <= rows, columns <= 100
	1 <= heights[i][j] <= 106





class Cell {
    int x;
    int y;
    Integer difference;
    Cell(int x,int y,Integer difference){
        this.x = x;
        this.y = y;
        this.difference = difference;
    }
}
class Solution {
    int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
    public int minimumEffortPath(int[][] heights) {
        int rows = heights.length;
        int cols = heights[0].length;
        int[][] differenceMatrix = new int[rows][cols];
        for(int[] eachRow:differenceMatrix){
            Arrays.fill(eachRow,Integer.MAX_VALUE);
        }
        differenceMatrix[0][0] = 0;
        PriorityQueue<Cell> queue = new PriorityQueue<Cell>((a,b)->a.difference.compareTo(b.difference));
        boolean[][] visited = new boolean[rows][cols];
        queue.add(new Cell(0,0,differenceMatrix[0][0]));

        while(!queue.isEmpty()){
            Cell curr = queue.poll();
            visited[curr.x][curr.y] = true;
            if(curr.x==rows-1 && curr.y==cols-1){
                return curr.difference;
            }
            for(int[] dir:dirs){
                int adjX = curr.x+dir[0];
                int adjY = curr.y+dir[1];
                if(isValidCell(adjX,adjY,rows,cols) && !visited[adjX][adjY]){
                    int currDiff = Math.abs(heights[adjX][adjY]-heights[curr.x][curr.y]);
                    int maxDiff = Math.max(currDiff,differenceMatrix[curr.x][curr.y]);
                    if(differenceMatrix[adjX][adjY]>maxDiff){
                        differenceMatrix[adjX][adjY] = maxDiff;
                        queue.add(new Cell(adjX,adjY,maxDiff));
                    }
                }
            }
        }
        return differenceMatrix[rows-1][cols-1];
    }
    boolean isValidCell(int x,int y,int rows,int cols){
        return x>=0 && x<rows && y>=0 && y<cols;
    }
}





class Solution {
    public int minimumEffortPath(int[][] heights) {
        int rows = heights.length;
        int cols = heights[0].length;

        int left = 0,right = 0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(i>0){
                    right = Math.max(right,Math.abs(heights[i][j]-heights[i-1][j]));
                }
                if(j>0){
                    right = Math.max(right,Math.abs(heights[i][j]-heights[i][j-1]));
                }
            }
        }
        int result = right;
        while(left<=right){
            int mid = left+(right-left)/2;
            if(canReachDestination(heights,mid)){
                result = mid;
                right = mid-1;
            } else {
                left = mid+1;
            }
        }
        return result;
    }
    private boolean canReachDestination(int[][] heights,int maxEffort){
        int rows = heights.length;
        int cols = heights[0].length;
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[rows][cols];
        queue.offer(new int[]{0,0});
        visited[0][0] = true;

        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        while(!queue.isEmpty()){
            int[] curr = queue.poll();
            int x = curr[0];
            int y = curr[1];
            if(x==rows-1 && y==cols-1){
                return true;
            }
            for(int[] dir:dirs){
                int newX = x+dir[0];
                int newY = y+dir[1];
                if(newX>=0 && newX<rows && newY>=0 && newY<cols && !visited[newX][newY]){
                    int effort = Math.abs(heights[newX][newY]-heights[x][y]);
                    if(effort<=maxEffort){
                        visited[newX][newY] = true;
                        queue.offer(new int[]{newX,newY});
                    }
                }
            }
        }
        return false;
    }
}

Overall Time Complexity:
O((m×n)⋅logH)
