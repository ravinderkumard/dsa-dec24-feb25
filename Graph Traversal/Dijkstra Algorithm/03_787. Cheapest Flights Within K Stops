787. Cheapest Flights Within K Stops

URL: https://leetcode.com/problems/cheapest-flights-within-k-stops/description/



There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

 
Example 1:

Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.

Example 2:

Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1
Output: 200
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.

Example 3:

Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0
Output: 500
Explanation:
The graph is shown above.
The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.

Notes: 
1. Create source and destination with price Map
2. Add source with value 0 to Queue
3. Run BFS on it while poping value from due and checking if source.price+neighbour.price>=value[neighbour] update otherwise let it but
4. Iterate process for every neighbour and for every element in que untill we reach end of due or k to 0 as no more destination allowed.
 
Constraints:

	1 <= n <= 100
	0 <= flights.length <= (n * (n - 1) / 2)
	flights[i].length == 3
	0 <= fromi, toi < n
	fromi != toi
	1 <= pricei <= 104
	There will not be any multiple flights between two cities.
	0 <= src, dst, k < n
	src != dst



class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Map<Integer,List<int[]>> adj = new HashMap<>();
        for(int[] i:flights){
            adj.computeIfAbsent(i[0], value->new ArrayList<>()).add(new int[]{i[1],i[2]});
        }
        int[] stops = new int[n];
        Arrays.fill(stops,Integer.MAX_VALUE);
        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b)->a[0]-b[0]);
        queue.offer(new int[]{0,src,0});

        while(!queue.isEmpty()){
            int[] temp = queue.poll();
            int dist = temp[0];
            int node = temp[1];
            int steps = temp[2];
            if(steps>stops[node] || steps>k+1){
                continue;
            }
            stops[node] = steps;
            if(node==dst){
                return dist;
            }
            if(!adj.containsKey(node)){
                continue;
            }
            for(int[] a:adj.get(node)){
                queue.offer(new int[]{dist+a[1],a[0],steps+1});
            }
        }
        return -1;
    }
}




Solution 1 : BFS
TC : O(N+E . K)
SC : O(N+E.K)
class Solution {
    Map<Integer,List<Pair<Integer,Integer>>> adj =new HashMap<>();

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        for(int[] flight:flights){
            int source = flight[0];
            int dest = flight[1];
            int price = flight[2];
            adj.putIfAbsent(source,new ArrayList<>());
            adj.get(source).add(new Pair(dest,price));
        }    
        int[] maxPrice = new int[n+1];
        Arrays.fill(maxPrice,Integer.MAX_VALUE);
        Queue<int[]> que = new LinkedList<>();
        que.add(new int[]{src,0});
        while(!que.isEmpty() && k>=0){
            int size = que.size();
            while(size>0){
                size--;
                int[] element = que.poll();
                int source = element[0];
                int price = element[1];
                if(!adj.containsKey(source)){
                    continue;
                }
                for(Pair<Integer,Integer> e:adj.get(source)){
                    int key = e.getKey();
                    int value = e.getValue();
                    if(value+price>=maxPrice[key]){
                        continue;
                    }
                    maxPrice[key] = value+price;
                    que.offer(new int[]{key,maxPrice[key]});
                }
            }
            k--;
        }
        return maxPrice[dst]==Integer.MAX_VALUE?-1:maxPrice[dst];
    }
}




Solution 2: Ballman Ford Algorithm
TC : O((N+E).K)
SC : O(N)
class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        int[] dist = new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src]=0;
        for(int i=0;i<=k;i++){
            int[] temp = Arrays.copyOf(dist,n);
            for(int[] flight:flights){
                if(dist[flight[0]]!=Integer.MAX_VALUE){
                    temp[flight[1]]= Math.min(dist[flight[0]]+flight[2],temp[flight[1]]);
                }
            }
            dist = temp;
        }
        return dist[dst] ==Integer.MAX_VALUE?-1:dist[dst];
    }
}

Time Complexity : O((N+E).K)
Space Complexity: O(N)




class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        int[] maxPrice = new int[n];
        Arrays.fill(maxPrice,Integer.MAX_VALUE);
        maxPrice[src]=0;
        for(int i=0;i<=k;i++){
            int[] temp = Arrays.copyOf(maxPrice,n);
            for(int[] flight:flights){
                if(maxPrice[flight[0]]!=Integer.MAX_VALUE){
                    temp[flight[1]]=Math.min(maxPrice[flight[0]]+flight[2],temp[flight[1]]);
                }
            }
            maxPrice = temp;
        }
        return maxPrice[dst]==Integer.MAX_VALUE?-1:maxPrice[dst];
    }
}
