URL: https://leetcode.com/problems/regions-cut-by-slashes/description/

959. Regions Cut By Slashes

An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

 
Example 1:

Input: grid = [" /","/ "]
Output: 2

Example 2:

Input: grid = [" /","  "]
Output: 1

Example 3:

Input: grid = ["/\\","\\/"]
Output: 5
Explanation: Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.

 
Constraints:

	n == grid.length == grid[i].length
	1 <= n <= 30
	grid[i][j] is either '/', '\', or ' '.







class Solution {
    public int regionsBySlashes(String[] grid) {
        int gridSize = grid.length;
        int pointsPerSide = gridSize+1;
        int totalPoints = pointsPerSide*pointsPerSide;

        int[] parentArray = new int[totalPoints];
        Arrays.fill(parentArray,-1);
        for(int i=0;i<pointsPerSide;i++){
            for(int j=0;j<pointsPerSide;j++){
                if(i==0||
                    j==0||
                    i==pointsPerSide-1||
                    j==pointsPerSide-1
                ) {
                    int point = i*pointsPerSide+j;
                    parentArray[point]=0;
                }
            }
        }
        parentArray[0] = -1;
        int regionCount = 1;
        for(int i=0;i<gridSize;i++){
            for(int j=0;j<gridSize;j++){
                if(grid[i].charAt(j)=='/'){
                    int topRight = i*pointsPerSide+(j+1);
                    int bottomLeft = (i+1)*pointsPerSide+j;
                    regionCount+=union(parentArray,topRight,bottomLeft);
                } else if(grid[i].charAt(j)=='\\') {
                    int topLeft = i*pointsPerSide+j;
                    int bottomRight = (i+1)*pointsPerSide+(j+1);
                    regionCount+=union(parentArray,topLeft,bottomRight);
                }
            }
        }
        return regionCount;
    }
    private int find(int[] parentArray,int node){
        if(parentArray[node]==-1){
            return node;
        }
        return parentArray[node] = find(parentArray,parentArray[node]);
    }
    private int union(int[] parentArray,int node1,int node2){
        int parent1 = find(parentArray,node1);
        int parent2 = find(parentArray,node2);
        if(parent1==parent2){
            return 1;
        }
        parentArray[parent2] = parent1;
        return 0;
    }
}
