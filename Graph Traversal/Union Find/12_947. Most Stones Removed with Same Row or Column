947. Most Stones Removed with Same Row or Column
URL: https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/description/

947. Most Stones Removed with Same Row or Column

On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 
Example 1:

Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.

Example 2:

Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.

Example 3:

Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.

 
Constraints:

	1 <= stones.length <= 1000
	0 <= xi, yi <= 104
	No two stones are at the same coordinate point.


class Solution {
    public int removeStones(int[][] stones) {
        List<Integer>[] adj = new ArrayList[stones.length];
        for(int i=0;i<stones.length;i++){
            adj[i] = new ArrayList<>();
        }
        for(int i=0;i<stones.length;i++){
            for(int j=i+1;j<stones.length;j++){
                if(shareSameRowOrColumn(stones[i],stones[j])){
                    adj[i].add(j);
                    adj[j].add(i);
                }
            }
        }
        int[] visited = new int[stones.length];
        int componentCount = 0;
        for(int i=0;i<stones.length;i++){
            if(visited[i]==0){
                componentCount++;
                dfs(stones,adj,visited,i);
            }
        }
        return stones.length-componentCount;
    }
    private boolean shareSameRowOrColumn(int[] a,int[] b){
        return a[0]==b[0]||a[1]==b[1];
    }
    private void dfs(int[][] stones,List<Integer>[] adj,int[] visited, int src){
        visited[src] = 1;
        for(int adjacent:adj[src]){
            if(visited[adjacent]==0){
                dfs(stones,adj,visited,adjacent);
            }
        }
    }
}



class Solution {
    public int removeStones(int[][] stones) {
        int[] rep = new int[stones.length];
        int[] size = new int[stones.length];
        for(int i=0;i<stones.length;i++){
            rep[i] = i;
            size[i] = 1;
        }
        int componentCount = stones.length;
        for(int i=0;i<stones.length;i++){
            for(int j=i+1;j<stones.length;j++){
                if(shareSameRowOrColumn(stones[i],stones[j])){
                    componentCount-=performUnion(rep,size,i,j);
                }
            }
        }
        return stones.length-componentCount;
    }
    private boolean shareSameRowOrColumn(int[] a,int[] b){
        return a[0]==b[0]||a[1]==b[1];
    }
    private int find(int[] rep,int x){
        int result = x;
        while(result!=rep[result]){
            rep[result] = rep[rep[result]];
            result = rep[result];
        }
        return result;
    }

    private int performUnion(int[] rep,int[] size,int i,int j){
        i = find(rep,i);
        j = find(rep,j);
        if(i==j){
            return 0;
        }
        if(size[i]>size[j]){
            rep[j]=i;
            size[i]+=size[j];
        } else {
            rep[i]=j;
            size[j]+=size[i];
        }
        return 1;
    }

}


class Solution {
    int K = 10001;
    public int removeStones(int[][] stones) {
        
        List<Integer>[] adj = new ArrayList[2*K+1];
        for(int i=0;i<2*K+1;i++){
            adj[i] = new ArrayList<>();
        }
        for(int i=0;i<stones.length;i++){
            int x = stones[i][0];
            int y = stones[i][1]+K;
                    adj[x].add(y);
                    adj[y].add(x);
            
        }
        int[] visited = new int[2*K+1];
        int componentCount = 0;
        for(int i=0;i<2*K+1;i++){
            if(visited[i]==0 && adj[i].size()>0){
                componentCount++;
                dfs(stones,adj,visited,i);
            }
        }
        return stones.length-componentCount;
    }
    private boolean shareSameRowOrColumn(int[] a,int[] b){
        return a[0]==b[0]||a[1]==b[1];
    }
    private void dfs(int[][] stones,List<Integer>[] adj,int[] visited, int src){
        visited[src] = 1;
        for(int adjacent:adj[src]){
            if(visited[adjacent]==0){
                dfs(stones,adj,visited,adjacent);
            }
        }
    }
}



class Solution {
    int parent[];
    int size[];
    public int removeStones(int[][] stones) {
        parent = new int[stones.length];
        size = new int[stones.length];
        for(int i=0;i<stones.length;i++){
            parent[i] = i;
            size[i] = 1;
        }
        int componentCount = stones.length;
        for(int i=0;i<stones.length;i++){
            for(int j=i+1;j<stones.length;j++){
                if(shareSameRowOrColumn(stones[i],stones[j])){
                    componentCount-=union(i,j);
                }
            }
        }
        return stones.length-componentCount;
    }
    private boolean shareSameRowOrColumn(int[] a,int[] b){
        return a[0]==b[0]||a[1]==b[1];
    }
    private int find(int x){
        int result = x;
        while(result!=parent[result]){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int i,int j){
        i = find(i);
        j = find(j);
        if(i==j){
            return 0;
        }
        if(size[i]>size[j]){
            parent[j]=i;
            size[i]+=size[j];
        } else {
            parent[i]=j;
            size[j]+=size[i];
        }
        return 1;
    }

}



Problem Intuition
* Stones are placed on a 2D plane, with each stone located at (x, y).
* A stone can be removed if there is at least one other stone in the same row (x) or column (y).
* The goal is to maximize the number of stones removed.
Key insight:
* The stones form a graph where stones are connected if they share the same row or column.
* The problem reduces to counting connected components in this graph. Each connected component must leave at least one stone unremoved (the "root" of the component).



Approach
1. Graph Representation
* Represent the stones as a graph:
    * Each stone (x, y) is a node.
    * An edge exists between two stones if they are in the same row or column.
* Use a data structure like Union-Find or DFS/BFS to determine connected components.
2. Relationship Between Connected Components and Removals
* For each connected component:
    * If a component has k stones, at least one stone must remain, so we can remove k - 1 stones.
* Total removable stones = Total stones - Number of connected components.
3. Using Union-Find
Union-Find helps efficiently find and merge connected components:
* Each stone (x, y) can be represented by x and y + 10001 (to differentiate rows and columns).
* Union stones that share the same row or column.
* Count the number of unique root nodes (connected components).




class UnionFind{
    int[] parent;
    int[] rank;
    UnionFind(int n){
        parent = new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
    }
    int find(int x){
        int result = x;
        while(result!=parent[result]){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    int union(int x, int y){
        int findX = find(x);
        int findY = find(y);
        if(findX==findY){
            return 0;
        }
        if(rank[findY]>rank[findX]){
            parent[findX] = findY;
            rank[findY]+=rank[findX];
        } else {
            parent[findY] = findX;
            rank[findX]+=rank[findY];
        }
        return 1;
    }
}
class Solution {
    public int removeStones(int[][] stones) {
        int n = stones.length;
        int component = n;
        UnionFind uf = new UnionFind(n);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(shareRowOrColumn(stones[i],stones[j])){
                    component-=uf.union(i,j);
                }
            }
        }
        return n-component;
    }
    private boolean shareRowOrColumn(int[] stone1,int[] stone2){
        return stone1[0]==stone2[0]||stone1[1]==stone2[1];
    }
}


Complexity Analysis
1. Time Complexity:
    * Union-Find operations are nearly O(1) per operation due to path compression and union by rank.
    * With O(n) union and find operations, so the total complexity is O(n⋅α(n)), where α is the inverse Ackermann function.
2. Space Complexity:
    * The parent map stores up to O(n) nodes.
