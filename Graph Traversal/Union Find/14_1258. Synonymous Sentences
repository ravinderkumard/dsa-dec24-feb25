1258. Synonymous Sentences
URL: https://leetcode.com/problems/synonymous-sentences/description/?envType=problem-list-v2&envId=exseebe3

1258. Synonymous Sentences

You are given a list of equivalent string pairs synonyms where synonyms[i] = [si, ti] indicates that si and ti are equivalent strings. You are also given a sentence text.

Return all possible synonymous sentences sorted lexicographically.

 
Example 1:

Input: synonyms = [["happy","joy"],["sad","sorrow"],["joy","cheerful"]], text = "I am happy today but was sad yesterday"
Output: ["I am cheerful today but was sad yesterday","I am cheerful today but was sorrow yesterday","I am happy today but was sad yesterday","I am happy today but was sorrow yesterday","I am joy today but was sad yesterday","I am joy today but was sorrow yesterday"]

Example 2:

Input: synonyms = [["happy","joy"],["cheerful","glad"]], text = "I am happy today but was sad yesterday"
Output: ["I am happy today but was sad yesterday","I am joy today but was sad yesterday"]

 
Constraints:

	0 <= synonyms.length <= 10
	synonyms[i].length == 2
	1 <= si.length, ti.length <= 10
	si != ti
	text consists of at most 10 words.
	All the pairs of synonyms are unique.
	The words of text are separated by single spaces.





class Solution {

    static class UnionFind{
        private final Map<String,String> parent;
        UnionFind(){
            parent = new HashMap<>();
        }
        public String find(String word){
            if(!parent.containsKey(word)){
                parent.put(word,word);
            }
            if(!parent.get(word).equals(word)){
                parent.put(word,find(parent.get(word)));
            }
            return parent.get(word);
        }
        public void union(String word1,String word2){
            String root1 = find(word1);
            String root2 = find(word2);
            if(!root1.equals(root2)){
                parent.put(root1,root2);
            }
        }
        public Map<String,List<String>> getGroups(){
            Map<String,List<String>> groups = new HashMap<>();
            for(String word:parent.keySet()){
                String root = find(word);
                groups.computeIfAbsent(root, k->new ArrayList<>()).add(word);
            }
            return groups;
        }
    }

    public List<String> generateSentences(List<List<String>> synonyms, String text) {
        UnionFind uf = new UnionFind();
        for(List<String> pair:synonyms){
            uf.union(pair.get(0), pair.get(1));
        }
        Map<String,List<String>> groups = uf.getGroups();
        Map<String,List<String>> wordToSynonyms = new HashMap<>();
        for(List<String> group:groups.values()){
            Collections.sort(group);
            for(String word:group){
                wordToSynonyms.put(word,group);
            }
        }
        String[] words = text.split(" ");
        List<String> result =new ArrayList<>();
        backtrack(words,0,new StringBuilder(),wordToSynonyms,result);
        return result;
    }
    public void backtrack(String[] words,int index,StringBuilder current,Map<String,List<String>> wordToSynonyms,List<String> result){
        if(index==words.length){
            result.add(current.toString().trim());
            return;
        }
        String word = words[index];
        List<String> options = wordToSynonyms.getOrDefault(word, Arrays.asList(word));

        int length = current.length();
        for(String option:options){
            if(current.length()>0){
                current.append(" ");
            }
            current.append(option);
            backtrack(words, index+1, current, wordToSynonyms, result);
            current.setLength(length);
        }
    }
}
