1202. Smallest String With Swaps

URL: https://leetcode.com/problems/smallest-string-with-swaps/description/



You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.

 
Example 1:

Input: s = "dcab", pairs = [[0,3],[1,2]]
Output: "bacd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[1] and s[2], s = "bacd"

Example 2:

Input: s = "dcab", pairs = [[0,3],[1,2],[0,2]]
Output: "abcd"
Explaination: 
Swap s[0] and s[3], s = "bcad"
Swap s[0] and s[2], s = "acbd"
Swap s[1] and s[2], s = "abcd"

Example 3:

Input: s = "cba", pairs = [[0,1],[1,2]]
Output: "abc"
Explaination: 
Swap s[0] and s[1], s = "bca"
Swap s[1] and s[2], s = "bac"
Swap s[0] and s[1], s = "abc"

 
Constraints:

	1 <= s.length <= 10^5
	0 <= pairs.length <= 10^5
	0 <= pairs[i][0], pairs[i][1] < s.length
	s only contains lower case English letters.






class UnionFind{
    int[] parent;
    int[] rank;
    UnionFind(int n){
        parent = new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
    }
    public int find(int x){
       if(x==parent[x]){
        return x;
       }
       return parent[x] = find(parent[x]);
    }
    public void union(int x,int y){
        int findX = find(x);
        int findY = find(y);
        if(findX!=findY){
           
            if(rank[findY]>rank[findX]){
                parent[findX] = findY;
                rank[findY]+=rank[findX];
            } else {
                parent[findY] = findX;
                rank[findX]+=rank[findY];
            }
        }
    }
}
class Solution {
    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {
        int n = pairs.size();
        UnionFind uf = new UnionFind(s.length());
        for(List<Integer> pair:pairs){
            uf.union(pair.get(0), pair.get(1));
        }

        Map<Integer,List<Integer>> rootToComponent = new HashMap<>();
        for(int vertex = 0;vertex<s.length();vertex++){
            int root = uf.find(vertex);
            rootToComponent.putIfAbsent(root, new ArrayList<>());
            rootToComponent.get(root).add(vertex);
        }
        char[] smallestString = new char[s.length()];
        for(List<Integer> indices:rootToComponent.values()){
            List<Character> characters = new ArrayList<>();
            for(int index : indices){
                characters.add(s.charAt(index));
            }
            Collections.sort(characters);
            for(int index = 0;index<indices.size();index++){
                smallestString[indices.get(index)] = characters.get(index);
            }
        }
        return new String(smallestString);

    }
}
