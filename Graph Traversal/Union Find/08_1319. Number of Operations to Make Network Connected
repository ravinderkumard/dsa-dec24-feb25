1319. Number of Operations to Make Network Connected

URL: https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/

1319. Number of Operations to Make Network Connected

There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

 
Example 1:

Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.

Example 2:

Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2

Example 3:

Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.

 
Constraints:

	1 <= n <= 105
	1 <= connections.length <= min(n * (n - 1) / 2, 105)
	connections[i].length == 2
	0 <= ai, bi < n
	ai != bi
	There are no repeated connections.
	No two computers are connected by more than one cable.





class Solution {
    int[] parent;
    int[] rank;
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1){
            return -1;
        }
        parent = new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        int count = n;
        for(int[] edge:connections){
            if(find(edge[0])!=find(edge[1])){
                count--;
                union(edge[0],edge[1]);
            }
        }
        return count-1;
    }
    private int find(int node){
        int result = node;
        while(parent[result]!=result){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int n1,int n2){
        int p1 = find(n1);
        int p2 = find(n2);
        if(p1==p2){
            return 0;
        }
        if(rank[p2]>rank[p1]){
            parent[p1] = p2;
            rank[p2]+=rank[p1];
        } else {
            parent[p2] = p1;
            rank[p1]+=rank[p2];
        }
        return 1;
    }
}


class Solution {
    int[] parent;
    int[] rank;
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1){
            return -1;
        }
        parent = new int[n];
        rank = new int[n];
        for(int i=0;i<n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        int count = n;
        for(int[] edge:connections){    
            union(edge[0],edge[1]);
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            if(parent[i] == i){
                ans++;
            }
        }
        return ans-1;
    }
    private int find(int node){
        int result = node;
        while(parent[result]!=result){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int n1,int n2){
        int p1 = find(n1);
        int p2 = find(n2);
        if(p1==p2){
            return 0;
        }
        if(rank[p2]>rank[p1]){
            parent[p1] = p2;
            rank[p2]+=rank[p1];
        } else {
            parent[p2] = p1;
            rank[p1]+=rank[p2];
        }
        return 1;
    }
}


class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1){
            return -1;
        }
        Map<Integer,List<Integer>> adj = new HashMap<>();
        for(int[] connection:connections){
            adj.computeIfAbsent(connection[0],k->new ArrayList<Integer>()).add(connection[1]);
            adj.computeIfAbsent(connection[1],k->new ArrayList<Integer>()).add(connection[0]);
        }
        int numberOfConnectedComponents = 0;
        boolean[] visit = new boolean[n];
        for(int i=0;i<n;i++){
            if(!visit[i]){
                numberOfConnectedComponents++;
                bfs(i,adj,visit);
            }
        }
        return numberOfConnectedComponents-1;
    }
    private void bfs(int node,Map<Integer,List<Integer>> adj,boolean[] visit){
        Queue<Integer> q = new LinkedList<>();
        q.offer(node);
        visit[node]=true;
        while(!q.isEmpty()){
            node = q.poll();
            if(!adj.containsKey(node)){
                continue;
            }
            for(int next:adj.get(node)){
                if(!visit[next]){
                    visit[next]=true;
                    q.offer(next);
                }
            }
        }
    }
}
