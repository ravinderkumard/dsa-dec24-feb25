1135. Connecting Cities With Minimum Cost

URL: https://leetcode.com/problems/connecting-cities-with-minimum-cost/description/

1135. Connecting Cities With Minimum Cost

There are n cities labeled from 1 to n. You are given the integer n and an array connections where connections[i] = [xi, yi, costi] indicates that the cost of connecting city xi and city yi (bidirectional connection) is costi.

Return the minimum cost to connect all the n cities such that there is at least one path between each pair of cities. If it is impossible to connect all the n cities, return -1,

The cost is the sum of the connections' costs used.

 
Example 1:

Input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: Choosing any 2 edges will connect all cities so we choose the minimum 2.

Example 2:

Input: n = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: There is no way to connect all cities even if all edges are used.

 
Constraints:

	1 <= n <= 104
	1 <= connections.length <= 104
	connections[i].length == 3
	1 <= xi, yi <= n
	xi != yi
	0 <= costi <= 105


class Solution {
    int[] parent;
    int[] rank;
    public int minimumCost(int n, int[][] connections) {
        parent = new int[n+1];
        rank = new int[n+1];
        Arrays.sort(connections,(a,b)->a[2]-b[2]);
        for(int i=1;i<=n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        int total = 0;
        int cost = 0;
        for(int[] connection:connections){
            int a = connection[0];
            int b = connection[1];
            if(isInSameGroup(a,b)){
                continue;
            }
            union(a,b);
            cost+=connection[2];
            total++;
        }
        if(total==n-1){
            return cost;
        } else {
            return -1;
        }
    }
    private void union(int a,int b){
        int rootA = find(a);
        int rootB = find(b);
        if(rootA==rootB){
            return;
        }
        if(rank[rootA]>rank[rootB]){
            parent[rootB] = rootA;
            rank[rootA]+=rank[rootB];
        } else {
            parent[rootA] = rootB;
            rank[rootB]+=rank[rootA];
        }
    }
    private int find(int a){
        while(a!=parent[a]){
            parent[a] = parent[parent[a]];
            a = parent[a];
        }
        return a;
    }
    private boolean isInSameGroup(int a,int b){
        return find(a)==find(b);
    }
}



class Solution {
    int[] parent;
    int[] rank;
    public int minimumCost(int n, int[][] connections) {
        parent = new int[n+1];
        rank = new int[n+1];
        for(int i=1;i<=n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        Arrays.sort(connections,(a,b)->a[2]-b[2]);
        int total = 0;
        int cost = 0;
        for(int[] connection:connections){
            int a = connection[0];
            int b = connection[1];
            if(find(a)==find(b)){
                continue;
            }
            union(a,b);
            cost+=connection[2];
            total++;
        }
        if(total==n-1){
            return cost;
        } else {
            return -1;
        }
    }
    private int find(int x){
        int result = x;
        while(result!=parent[result]){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int a,int b){
        int p1 = find(a);
        int p2 = find(b);
        if(p1==p2){
            return 0;
        }
        if(rank[p2]>rank[p1]){
            parent[p1] = p2;
            rank[p2]+=rank[p1];
        } else {
            parent[p2] = p1;
            rank[p1]+=rank[p2];
        }
        return 1;
    }
}




class UnionFind {
    int[] parent;
    int[] rank;
    UnionFind(int size){
        parent = new int[size];
        rank = new int[size];
        for(int i=1;i<size;i++){
            parent[i] = i;
            rank[i] = 1;
        }
    }
    public int find(int x){
        int result = x;
        while(result!=parent[result]){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    public int union(int x,int y){
        int findX = find(x);
        int findY = find(y);
        if(findX==findY){
            return 0;
        }
        if(rank[findY]>rank[findX]){
            parent[findX] = findY;
            rank[findY]+=rank[findX];
        } else {
            parent[findY] = findX;
            rank[findX]+=rank[findY];
        }
        return 1;
    }
}

class Solution {
    public int minimumCost(int n, int[][] connections) {
        UnionFind uf = new UnionFind(n+1);
        Arrays.sort(connections,(a,b)->a[2]-b[2]);
        int connectedComponent = n;
        int cost = 0;
        for(int[] connection:connections){
            if(uf.union(connection[0],connection[1])==1){
                connectedComponent--;
                cost+=connection[2];
            }
        }
        if(connectedComponent!=1){
            return -1;
        }
        return cost;
    }
}
