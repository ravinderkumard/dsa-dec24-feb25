990. Satisfiability of Equality Equations

URL: https://leetcode.com/problems/satisfiability-of-equality-equations/description/

990. Satisfiability of Equality Equations

You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

 
Example 1:

Input: equations = ["a==b","b!=a"]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.

Example 2:

Input: equations = ["b==a","a==b"]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.

 
Constraints:

	1 <= equations.length <= 500
	equations[i].length == 4
	equations[i][0] is a lowercase letter.
	equations[i][1] is either '=' or '!'.
	equations[i][2] is '='.
	equations[i][3] is a lowercase letter.




class Solution {
    int[] parent = new int[26];
    public boolean equationsPossible(String[] equations) {
        
        for(int i=0;i<26;i++){
            parent[i] = i;
        }
        for(String eq:equations){
            if(eq.charAt(1)=='='){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                union(x,y);
            }
        }
        for(String eq:equations){
            if(eq.charAt(1)=='!'){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                if(find(x)==find(y)){
                    return false;
                }
            }
        }
        return true;
    }
    private int find(int x){
        if(parent[x]!=x){
            parent[x]=find(parent[x]);
        }
        return parent[x];
    }
    private void union(int x,int y){
        x = find(x);
        y = find(y);
        if(x!=y){
            parent[x] = y;
        }
    }
}




class Solution {
    int[] parent = new int[26];
    int[] rank = new int[26];
    public boolean equationsPossible(String[] equations) {
        
        for(int i=0;i<26;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        for(String eq:equations){
            if(eq.charAt(1)=='='){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                union(x,y);
            }
        }
        for(String eq:equations){
            if(eq.charAt(1)=='!'){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                if(find(x)==find(y)){
                    return false;
                }
            }
        }
        return true;
    }
    private int find(int node){
        int result = node;
        while(parent[result]!=result){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int n1,int n2){
        int p1 = find(n1);
        int p2 = find(n2);
        if(p1==p2){
            return 0;
        }
        if(rank[p2]>rank[p1]){
            parent[p1] = p2;
            rank[p2]+=rank[p1];
        } else {
            parent[p2] = p1;
            rank[p1]+=rank[p2];
        }
        return 1;
    }
}




class UnionFind{
    int[] parent;
    int[] rank;
    UnionFind(){
        parent = new int[26];
        rank = new int[26];
        for(int i=0;i<26;i++){
            parent[i] = i;
            rank[i] = 1;
        }
    }
    int find(int x){
        int result = x;
        while(result!=parent[result]){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    int union(int x,int y){
        int findX = find(x);
        int findY = find(y);
        if(findX==findY){
            return 0;
        }
        if(rank[findY]>rank[findX]){
            parent[findX] = findY;
            rank[findY]+=rank[findX];
        } else {
            parent[findY] = findX;
            rank[findX]+=rank[findY];
        }
        return 1;
    }
}

class Solution {
    public boolean equationsPossible(String[] equations) {
        UnionFind uf = new UnionFind();
        for(String eq:equations){
            if(eq.charAt(1)=='='){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                uf.union(x,y);
            }
        }
        for(String eq:equations){
            if(eq.charAt(1)=='!'){
                int x = eq.charAt(0)-'a';
                int y = eq.charAt(3)-'a';
                if(uf.find(x)==uf.find(y)){
                    return false;
                }
            }
        }
        return true;
    }
}
