684. Redundant Connection

URL: https://leetcode.com/problems/redundant-connection/description/

684. Redundant Connection

In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 
Example 1:

Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:

Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]

 
Constraints:

	n == edges.length
	3 <= n <= 1000
	edges[i].length == 2
	1 <= ai < bi <= edges.length
	ai != bi
	There are no repeated edges.
	The given graph is connected.




class Solution {
    private int[] parent;
    private int[] rank;
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        parent = new int[n+1];
        rank = new int[n+1];
        for(int i=1;i<=n;i++){
            parent[i] = i;
            rank[i] = 1;
        }
        for(int[] edge:edges){
            if(find(edge[0])==find(edge[1])){
                return edge;
            } else {
                union(edge[0],edge[1]);
            }
        }
        return new int[]{};
    }
    private int find(int node){
        int result = node;
        while(parent[result]!=result){
            parent[result] = parent[parent[result]];
            result = parent[result];
        }
        return result;
    }
    private int union(int n1,int n2){
        int p1 = find(n1);
        int p2 = find(n2);
        if(p1==p2){
            return 0;
        }
        if(rank[p1]>rank[p2]){
            parent[p1] = p2;
            rank[p2]+= rank[p1];
        } else {
            parent[p2] = p1;
            rank[p1]+= rank[p2];
        }
        return 1;
    }
}


class Solution {
    int[] parent;
    int[] rank;
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        parent = new int[n+1];
        rank = new int[n+1];
        int count = 0;
        for(int i=1;i<=n;i++){
            parent[i] = i;
            rank[i] = 1;
        }

        for(int[] edge:edges){
            if(find(edge[0])==find(edge[1])){
                return edge;
            } else {
                union(edge[0],edge[1]);
            }
        }
        return new int[]{};
    }
    private int find(int x){
        if(parent[x]!=x){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    private boolean union(int x,int y){
        int findX = find(x);
        int findY = find(y);

        if(findX==findY){
            return false;
        }
        if(rank[findX]>rank[findY]){
            parent[findY] = findX;
        } else if(rank[findY]>rank[findX]){
            parent[findX] = findY;
        } else {
            parent[findY] = findX;
            rank[findY]++;
        }
        return true;
    }
}

