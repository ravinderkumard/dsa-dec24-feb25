You play a game consisting of n rooms and m tunnels. Your initial score is 0, and each tunnel increases your score by x where x may be both positive or negative. You may go through a tunnel several times.
Your task is to walk from room 1 to room n. What is the maximum score you can get?
Input
The first input line has two integers n and m: the number of rooms and tunnels. The rooms are numbered 1,2,\dots,n.
Then, there are m lines describing the tunnels. Each line has three integers a, b and x: the tunnel starts at room a, ends at room b, and it increases your score by x. All tunnels are one-way tunnels.
You can assume that it is possible to get from room 1 to room n.
Output
Print one integer: the maximum score you can get. However, if you can get an arbitrarily large score, print -1.
Constraints

1 \le n \le 2500
1 \le m \le 5000
1 \le a,b \le n
-10^9 \le x \le 10^9

Example
Input:
4 5
1 2 3
2 4 -1
1 3 -2
3 4 7
1 4 4

Output:
5



import java.io.*;
import java.util.*;

public class Main {
    static class Edge {
        int u, v;
        long w;
        Edge(int u, int v, long w) {
            this.u = u; this.v = v; this.w = w;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] first = br.readLine().split(" ");
        int n = Integer.parseInt(first[0]);
        int m = Integer.parseInt(first[1]);

        List<Edge> edges = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) adj.add(new ArrayList<>());

        for (int i = 0; i < m; i++) {
            String[] line = br.readLine().split(" ");
            int a = Integer.parseInt(line[0]);
            int b = Integer.parseInt(line[1]);
            long x = Long.parseLong(line[2]);
            edges.add(new Edge(a, b, x));
            adj.get(a).add(b);
        }

        long NEG_INF = Long.MIN_VALUE / 2; // prevent overflow
        long[] dist = new long[n+1];
        Arrays.fill(dist, NEG_INF);
        dist[1] = 0;

        // Bellman-Ford for max path: n-1 iterations
        for (int i = 0; i < n - 1; i++) {
            boolean updated = false;
            for (Edge e : edges) {
                if (dist[e.u] != NEG_INF && dist[e.u] + e.w > dist[e.v]) {
                    dist[e.v] = dist[e.u] + e.w;
                    updated = true;
                }
            }
            if (!updated) break;
        }

        // Detect nodes affected by positive cycles
        boolean[] affected = new boolean[n+1];
        for (Edge e : edges) {
            if (dist[e.u] != NEG_INF && dist[e.u] + e.w > dist[e.v]) {
                affected[e.v] = true;
            }
        }

        // BFS from affected nodes to check reachability to n
        boolean[] visited = new boolean[n+1];
        Queue<Integer> q = new LinkedList<>();
        for (int i = 1; i <= n; i++) {
            if (affected[i]) {
                q.add(i);
                visited[i] = true;
            }
        }

        boolean canInfinite = false;
        while (!q.isEmpty()) {
            int node = q.poll();
            if (node == n) {
                canInfinite = true;
                break;
            }
            for (int nei : adj.get(node)) {
                if (!visited[nei]) {
                    visited[nei] = true;
                    q.add(nei);
                }
            }
        }

        if (canInfinite) {
            System.out.println(-1);
        } else {
            System.out.println(dist[n]);
        }
    }
}
