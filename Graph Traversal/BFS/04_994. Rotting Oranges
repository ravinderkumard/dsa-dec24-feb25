
04_994. Rotting Oranges
Medium
URL: https://leetcode.com/problems/rotting-oranges/

You are given an m x n grid where each cell can have one of three values:

	0 representing an empty cell,
	1 representing a fresh orange, or
	2 representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Â 
Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


Notes:
Visit each element in grid and add fresh to fresh counter and rotten index to que as int[]{I,j}
BFS on Queue
Add element which are fresh to rotten que and mark them as rotten and reduce fresh counter.
Return minutes if fresh==0 other wise -1;


Constraints:

	m == grid.length
	n == grid[i].length
	1 <= m, n <= 10
	grid[i][j] is 0, 1, or 2.


Solution : 
class Solution {
    public int orangesRotting(int[][] grid) {
        int min = 0;
        int m = grid.length;
        int n = grid[0].length;
        
        int fresh = 0;
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i += 1) {
            for (int j = 0; j < n; j += 1) {
                if(grid[i][j] == 2) 
                    queue.offer(new int[] { i, j }); 
                else if(grid[i][j] == 1) 
                    fresh += 1;
            }
        }
        int[][] dirs = { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
        while(!queue.isEmpty() && fresh!=0){
            min++;
            int sz = queue.size();
           for (int i = 0; i < sz; i += 1) {
                            
                int[] element = queue.poll();
                int r = element[0];
                int c = element[1];
                for(int[] dir : dirs){
                    int x = r+dir[0];
                    int y = c+dir[1];
                    
                    if(0 <= x && x < m && 0 <= y && y < n && grid[x][y] == 1) {
                        grid[x][y] = 2;
                        queue.add(new int[]{x,y});
                        fresh--;
                    }
                }
            }
        }
        if(fresh>0){
            return -1;
        }
        return min;
    }
    
}
