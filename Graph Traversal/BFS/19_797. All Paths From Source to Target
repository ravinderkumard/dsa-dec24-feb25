797. All Paths From Source to Target


Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
All the elements of graph[i] are unique.
The input graph is guaranteed to be a DAG.

Use Backtracking starting from 0 and visiting each node once.


class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        int n = graph.length;
        List<List<Integer>> result = new ArrayList<>();
        LinkedList<Integer> path = new LinkedList<>();
        path.addLast(0);
        backtrack(0,path,n-1,graph,result);
        return result;
    }
    private void backtrack(int currNode,LinkedList<Integer> path,int target,int[][] graph,List<List<Integer>> result){
        if(currNode==target){
            result.add(new ArrayList<Integer>(path));
            return;
        }
        for(int nextNode : graph[currNode]){
            path.addLast(nextNode);
            this.backtrack(nextNode,path,target,graph,result);
            path.removeLast();
        }
    }
}
