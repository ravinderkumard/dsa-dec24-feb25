
130. Surrounded Regions
Medium

URL: https://leetcode.com/problems/surrounded-regions/

Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 
Example 1:

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.

Example 2:

Input: board = [["X"]]
Output: [["X"]]

 
Constraints:

	m == board.length
	n == board[i].length
	1 <= m, n <= 200
	board[i][j] is 'X' or 'O'.



class Solution {
    public void solve(char[][] board) {
        int row = board.length;
        int col = board[0].length;

        for(int r=0;r<row;r++){
            if(board[r][0]=='O'){
                dfs(board,r,0,row,col);
            }
            if(board[r][col-1]=='O')
                dfs(board,r,col-1,row,col);
        }

        for(int c=0;c<col;c++){
            if(board[0][c]=='O'){
                dfs(board,0,c,row,col);
            }
            if(board[row-1][c]=='O')
                dfs(board,row-1,c,row,col);
        }
        for(int r=0;r<row;r++){
            for(int c=0;c<col;c++){
                if(board[r][c]=='O'){
                    board[r][c] = 'X';
                }
            }
        }
        
        for(int r=0;r<row;r++){
            for(int c=0;c<col;c++){
                if(board[r][c]=='T'){
                    board[r][c] = 'O';
                }
            }
        }
    }
    public void dfs(char[][] board,int r,int c, int row,int col){
        if(r<0||c<0||r>=row||c>=col||board[r][c]!='O'){
            return;
        }
        board[r][c] = 'T';
        dfs(board,r,c+1,row,col);
        dfs(board,r,c-1,row,col);
        dfs(board,r+1,c,row,col);
        dfs(board,r-1,c,row,col);
    }

}
