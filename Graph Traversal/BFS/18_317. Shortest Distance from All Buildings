URL: https://leetcode.com/problems/shortest-distance-from-all-buildings/description/

317. Shortest Distance from All Buildings

You are given an m x n grid grid of values 0, 1, or 2, where:

	each 0 marks an empty land that you can pass by freely,
	each 1 marks a building that you cannot pass through, and
	each 2 marks an obstacle that you cannot pass through.

You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.

Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return -1.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.

 
Example 1:

Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.
So return 7.

Example 2:

Input: grid = [[1,0]]
Output: 1

Example 3:

Input: grid = [[1]]
Output: -1

 
Constraints:

	m == grid.length
	n == grid[i].length
	1 <= m, n <= 50
	grid[i][j] is either 0, 1, or 2.
	There will be at least one building in the grid.




class Solution {
    int rows,cols;
    public int shortestDistance(int[][] grid) {
        int minDistance = Integer.MAX_VALUE;
        rows = grid.length;
        cols = grid[0].length;
        int totalHouses = 0;
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1){
                    totalHouses++;
                }
            }
        }

        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==0){
                    minDistance = Math.min(minDistance,bfs(grid,row,col,totalHouses));
                }
            }
        }
        if(minDistance==Integer.MAX_VALUE){
            return -1;
        }
        return minDistance;
    }
    private int bfs(int[][] grid,int row,int col,int totalHouses){
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        int distanceSum = 0;
        int housesReached = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row,col});
        boolean[][] visit = new boolean[rows][cols];
        visit[row][col] = true;
        int steps = 0;
        while(!queue.isEmpty() && housesReached!=totalHouses){
            for(int i = queue.size();i>0;--i){
                int[] curr = queue.poll();
                row = curr[0];
                col = curr[1];
                if(grid[row][col]==1){
                    distanceSum+=steps;
                    housesReached++;
                    continue;
                }
                for(int[] dir:dirs){
                    int nextRow = row+dir[0];
                    int nextCol = col+dir[1];
                    if(nextRow>=0 && nextRow<rows && nextCol>=0 && nextCol<cols){
                        if(!visit[nextRow][nextCol] && grid[nextRow][nextCol]!=2){
                            visit[nextRow][nextCol] = true;
                            queue.offer(new int[]{nextRow,nextCol});
                        }
                    }
                }
            }
            steps++;
        }
        if(housesReached!=totalHouses){
            for(row=0;row<rows;row++){
                for(col=0;col<cols;col++){
                    if(grid[row][col]==0 && visit[row][col]){
                        grid[row][col]=2;
                    }
                }
            }
            return Integer.MAX_VALUE;
        }
        return distanceSum;
    }
}

Time Complexity: O(N^2.M^2)
Space Complexity: O(N.M)





class Solution {
    int rows,cols;
    public int shortestDistance(int[][] grid) {
        int minDistance = Integer.MAX_VALUE;
        rows = grid.length;
        cols = grid[0].length;
        int totalHouses = 0;
        int[][][] distances = new int[rows][cols][2];
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1){
                    totalHouses++;
                    bfs(grid,distances,row,col);
                }
            }
        }

        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(distances[row][col][1]==totalHouses){
                    minDistance = Math.min(minDistance,distances[row][col][0]);
                }
            }
        }
        if(minDistance==Integer.MAX_VALUE){
            return -1;
        }
        return minDistance;
    }
    private void bfs(int[][] grid,int[][][] distances,int row,int col){
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row,col});
        boolean[][] visit = new boolean[rows][cols];
        visit[row][col]=true;
        int steps = 0;
        while(!queue.isEmpty()){
            for(int i=queue.size();i>0;--i){
                int[] curr = queue.poll();
                row = curr[0];
                col = curr[1];
                if(grid[row][col]==0){
                    distances[row][col][0]+=steps;
                    distances[row][col][1]+=1;
                }
                for(int[] dir:dirs){
                    int nextRow = dir[0]+row;
                    int nextCol = dir[1]+col;
                    if(nextRow>=0 && nextRow<rows && nextCol>=0 && nextCol<cols){
                        if(!visit[nextRow][nextCol] && grid[nextRow][nextCol]==0){
                            visit[nextRow][nextCol]=true;
                            queue.offer(new int[]{nextRow,nextCol});
                        }
                    }
                }
            }
            steps++;
        }
    }
}





class Solution {
    public int shortestDistance(int[][] grid) {
        int[][] dirs = {{1,0},{0,1},{-1,0},{0,-1}};
        int rows = grid.length;
        int cols = grid[0].length;
        int[][] total = new int[rows][cols];
        int emptyLandValue = 0;
        int minDistance = Integer.MAX_VALUE;
        for(int row =0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1){
                    minDistance = Integer.MAX_VALUE;

                    Queue<int[]> queue = new LinkedList<>();
                    queue.offer(new int[]{row,col});
                    int steps =0;
                    while(!queue.isEmpty()){
                        steps++;
                        for(int level = queue.size();level>0;--level){
                            int[] curr = queue.poll();
                            for(int[] dir:dirs){
                                int nextRow = curr[0]+dir[0];
                                int nextCol = curr[1]+dir[1];
                                if(nextRow>=0 && nextRow<rows && nextCol>=0 && nextCol<cols && grid[nextRow][nextCol]==emptyLandValue){
                                    grid[nextRow][nextCol]--;
                                    total[nextRow][nextCol]+=steps;
                                    queue.offer(new int[] {nextRow,nextCol});
                                    minDistance = Math.min(minDistance,total[nextRow][nextCol]);
                                }
                            }
                        }
                    }
                    emptyLandValue--;
                }
            }
        }
        return minDistance==Integer.MAX_VALUE?-1:minDistance;
    }
}
