733. Flood Fill

URL: https://leetcode.com/problems/flood-fill/description/

733. Flood Fill

An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

Return the modified image after performing the flood fill.

 
Example 1:

Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.

Example 2:

Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
Output: [[0,0,0],[0,0,0]]
Explanation: The starting pixel is already colored 0, so no changes are made to the image.

 
Constraints:

	m == image.length
	n == image[i].length
	1 <= m, n <= 50
	0 <= image[i][j], color < 216
	0 <= sr < m
	0 <= sc < n



DFS Solution 1;
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int rows = image.length;
        int cols = image[0].length;
        int currColor = image[sr][sc];
        if(currColor!=color){
            color(sr,sc,rows,cols,currColor,image,color);
        }
        return image;
    }
    private void color(int sr,int sc, int rows,int cols,int color,int[][] image,int newColor){
        if(image[sr][sc]==color){
            image[sr][sc] = newColor;
            if(sr>=1){
                color(sr-1,sc,rows,cols,color,image,newColor);
            }
            if(sc>=1){
                color(sr,sc-1,rows,cols,color,image,newColor);
            }
            if(sr+1<rows){
                color(sr+1,sc,rows,cols,color,image,newColor);
            }
            if(sc+1<cols){
                color(sr,sc+1,rows,cols,color,image,newColor);
            }
        }
    }
}

DFS Solution 2:
class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int origColor = image[sr][sc];
        if(color!=origColor){
            dfs(image,sr,sc,origColor,color);
        }
        return image;
    }
    private void dfs(int[][] image,int sr,int sc,int color,int newColor){
        if(sr<0||sr>=image.length ||sc<0||sc>=image[0].length||image[sr][sc]!=color){
            return;
        }
        image[sr][sc]=newColor;
        dfs(image,sr+1,sc,color,newColor);
        dfs(image,sr-1,sc,color,newColor);
        dfs(image,sr,sc+1,color,newColor);
        dfs(image,sr,sc-1,color,newColor);
    }
}


Complexity Analysis:
1. Time Complexity:
    * O(N × M): In the worst case, we might need to visit all cells in the grid, where N is the number of rows and M is the number of columns. Each cell is visited only once.
2. Space Complexity:
    * O(N × M): The space required for the recursion stack is proportional to the size of the connected component. In the worst case (if the grid is entirely filled with the same color), the recursion stack may reach a depth of N × M.



BFS

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int rows = image.length;
        int cols = image[0].length;
        int orignalColor = image[sr][sc];
        if(orignalColor==color){
            return image;
        }
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{sr,sc});
        image[sr][sc] = color;
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()){
            int[] element = queue.poll();
            image[element[0]][element[1]] = color;
            
            for(int[] dir:dirs){
                int x = element[0]+dir[0];
                int y = element[1]+dir[1];
                if(x>=0 && x<rows && y>=0 && y<cols && image[x][y]==orignalColor){
                    queue.add(new int[]{x,y});
                }
            }
        }
        return image;
    }
}

Complexity:
1. Time Complexity: O(N × M), where N is the number of rows and M is the number of columns. Each cell is processed at most once.
2. Space Complexity: O(N × M) for the BFS queue in the worst case (all cells are connected).
