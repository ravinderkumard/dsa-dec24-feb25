1293. Shortest Path in a Grid with Obstacles Elimination

You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.

Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.

 

Example 1:


Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10.
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).
Example 2:


Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1
Output: -1
Explanation: We need to eliminate at least two obstacles to find such a walk.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 40
1 <= k <= m * n
grid[i][j] is either 0 or 1.
grid[0][0] == grid[m - 1][n - 1] == 0





class StepState {
    public int steps, row,col,k;
    public StepState(int steps,int row,int col,int k){
        this.steps = steps;
        this.row = row;
        this.col = col;
        this.k = k;
    }
    public int hashCode(){
        return (this.row+1)*(this.col+1)*this.k;
    }
    public boolean equals(Object other){
        if(!(other instanceof StepState)){
            return false;
        }
        StepState newState = (StepState) other;
        return (this.row==newState.row) && (this.col==newState.col) && (this.k == newState.k);
    }
    public String toString(){
        return String.format("%d %d %d",this.row,this.col,this.k);
    }
}
class Solution {
    public int shortestPath(int[][] grid, int k) {
        int rows = grid.length;
        int cols = grid[0].length;
        if(grid[0][0] == 1){
            return -1;
        }
        if(k>=rows+cols-2){
            return rows+cols-2;
        }
        Deque<StepState> queue = new LinkedList<>();
        HashSet<StepState> seen = new HashSet<>();
        StepState start = new StepState(0,0,0,k);
        queue.add(start);
        seen.add(start);
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()){
            StepState curr = queue.pollFirst();
            if(curr.row==rows-1 && curr.col==cols-1){
                return curr.steps;
            }
            for(int[] dir:dirs){
                int nextRow = curr.row+dir[0];
                int nextCol = curr.col+dir[1];
                if(0>nextRow||nextRow==rows ||0>nextCol||nextCol==cols){
                    continue;
                }
                int nextElimination = curr.k-grid[nextRow][nextCol];
                StepState newState = new StepState(curr.steps+1,nextRow,nextCol,nextElimination);

                if(nextElimination>=0 && !seen.contains(newState)){
                    seen.add(newState);
                    queue.addLast(newState);
                }
            }
        }
        return -1;
    }
}
