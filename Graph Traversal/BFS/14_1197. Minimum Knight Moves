URL: https://leetcode.com/problems/minimum-knight-moves/description/

1197. Minimum Knight Moves

In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Return the minimum number of steps needed to move the knight to the square [x, y]. It is guaranteed the answer exists.

 
Example 1:

Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:

Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

 
Constraints:

	-300 <= x, y <= 300
	0 <= |x| + |y| <= 300





TLE

class Solution {
    public int minKnightMoves(int x, int y) {
        int steps = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0,0});
        Map<String,Integer> map = new HashMap<>();
        int[][] dirs = {{1,2},{2,1},{2,-1},{-2,1},{-1,-2},{-2,-1},{-2,1},{-1,2}};
        while(!queue.isEmpty()){
            int[] element = queue.poll();
            if(element[0]==x && element[1]==y){
                return element[2];
            }
            for(int[] dir:dirs){
                int newX = element[0]+dir[0];
                int newY = element[1]+dir[1];
                queue.add(new int[]{newX,newY,element[2]+1});
                
            }
        }
        return -1;
    }
}







class Solution {
    public int minKnightMoves(int x, int y) {
        int steps = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0,0,0});
        Map<String,Integer> origMap = new HashMap<>();
        origMap.put("0,0",0);
        Map<String,Integer> targetMap = new HashMap<>();
        targetMap.put(x+","+y,0);
        Queue<int[]> targetQueue = new LinkedList<>();
        targetQueue.add(new int[]{x,y,0});
        int[][] dirs = {{1,2},{2,1},{2,-1},{1,-2},{-1,-2},{-2,-1},{-2,1},{-1,2}};
        while(true){
            int[] origin = queue.remove();
            String originXY = origin[0]+","+origin[1];
            if(targetMap.containsKey(originXY)){
                return origin[2]+targetMap.get(originXY);
            }

            int[] target = targetQueue.remove();
            String targetXY = target[0]+","+target[1];
            if(origMap.containsKey(targetXY)){
                return target[2]+origMap.get(targetXY);
            }

            for(int[] dir:dirs){
                int[] nextOrigin = new int[]{origin[0]+dir[0],origin[1]+dir[1]};
                String nextOriginXY = nextOrigin[0]+","+nextOrigin[1];
                if(!origMap.containsKey(nextOriginXY)){
                    queue.add(new int[]{nextOrigin[0],nextOrigin[1],origin[2]+1});
                    origMap.put(nextOriginXY,origin[2]+1);
                }

                int[] nextTarget = new int[]{target[0]+dir[0],target[1]+dir[1]};
                String nextTargetXY = nextTarget[0]+","+nextTarget[1];
                if(!targetMap.containsKey(nextTargetXY)){
                    targetQueue.add(new int[]{nextTarget[0],nextTarget[1],target[2]+1});
                    targetMap.put(nextTargetXY,target[2]+1);
                }
            }
        }
        
    }
}




class Solution {
    Map<String,Integer> memo = new HashMap<>();
    public int minKnightMoves(int x, int y) {
        return dfs(Math.abs(x),Math.abs(y));
    }
    private int dfs(int x,int y){
        String key = x+","+y;
        if(memo.containsKey(key)){
            return memo.get(key);
        }
        if(x+y==0){
            return 0;
        } else if(x+y==2){
            return 2;
        } else {
            Integer ret = Math.min(dfs(Math.abs(x-1),Math.abs(y-2)),dfs(Math.abs(x-2),Math.abs(y-1)))+1;
            memo.put(key,ret);
            return ret;
        }
    }
}
