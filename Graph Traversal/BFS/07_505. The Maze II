505. The Maze II
URL: https://leetcode.com/problems/the-maze-ii/description/



There is a ball in a maze with empty spaces (represented as 0) and walls (represented as 1). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the m x n maze, the ball's start position and the destination, where start = [startrow, startcol] and destination = [destinationrow, destinationcol], return the shortest distance for the ball to stop at the destination. If the ball cannot stop at destination, return -1.

The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).

 
Example 1:

Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: 12
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.
The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.

Example 2:

Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: -1
Explanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.

Example 3:

Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: -1

 
Constraints:

	m == maze.length
	n == maze[i].length
	1 <= m, n <= 100
	maze[i][j] is 0 or 1.
	start.length == 2
	destination.length == 2
	0 <= startrow, destinationrow < m
	0 <= startcol, destinationcol < n
	Both the ball and the destination exist in an empty space, and they will not be in the same position initially.
	The maze contains at least 2 empty spaces.

************************************************************************************************************************************
NOTES:
1. Use same technique as Maze Problem LC#490
2. The only differenc between 2 problems:
	1. IN problem 1 you just have to stop and return true if you meet your destination.
	2. In second Problem you jsut have to calcualte distance for all the boxes and then return if result at
	destination is some value and not MAX_VALUE.

1. Use BFS
2. create array of same size as maze and populate with MAX_VALUE, set start value as 0.
3. Put start index to Queue
4. Iterate over queue by pulling out element and rolling until ball roll by add dir[0], dir[1] to x and y and keep increating the count by 1
5. check if distanceof the element + count is less than element at current position(where we are), update the value
	and add the coordinates to queue.
************************************************************************************************************************************


class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int rows = maze.length;
        int cols = maze[0].length;
        int[][] distance = new int[maze.length][maze[0].length];
        for(int[] row:distance){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        distance[start[0]][start[1]] = 0;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.add(start);
        while(!queue.isEmpty()){
            int[] element = queue.poll();
            for(int[] dir:dirs){
                int x = element[0]+dir[0];
                int y = element[1]+dir[1];
                int count = 0;
                while(x>=0 && y>=0 && x<rows && y<cols && maze[x][y]==0){
                    x+=dir[0];
                    y+=dir[1];
                    count++;
                }
                x-=dir[0];
                y-=dir[1];
                if(distance[element[0]][element[1]]+count<distance[x][y]){
                    distance[x][y] = distance[element[0]][element[1]]+count;
                    queue.add(new int[]{x,y});
                }
            }
        }
        return distance[destination[0]][destination[1]] == Integer.MAX_VALUE?-1:distance[destination[0]][destination[1]];
    }
}
Complexity Analysis
* Time complexity : O(m∗n∗max(m,n)). Time complexity : O(m∗n∗max(m,n)). Complete traversal of maze will be done in the worst case. Here, m and n refers to the number of rows and columns of the maze. Further, for every current node chosen, we can travel upto a maximum depth of max(m,n) in any direction.
* Space complexity : O(mn). queue size can grow upto m∗n in the worst case.



Solution 2:
Dijkstra

class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int rows = maze.length;
        int cols = maze[0].length;
        int[][] distance = new int[rows][cols];
        boolean[][] visited = new boolean[rows][cols];
        for(int[] row:distance){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        distance[start[0]][start[1]] = 0;
        dijkstra(maze,distance,visited);
        return distance[destination[0]][destination[1]]==Integer.MAX_VALUE?-1:distance[destination[0]][destination[1]];
    }
    private void dijkstra(int[][] maze,int[][] distance, boolean[][] visited){
        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        while(true){
            int[] s = minDistance(distance,visited);
            if(s[0]<0){
                break;
            }
            visited[s[0]][s[1]] = true;
            for(int[] dir:dirs){
                int x = s[0]+dir[0];
                int y = s[1]+dir[1];
                int count = 0;
                while(x>=0 && y>=0 && x<maze.length && y<maze[0].length && maze[x][y] == 0){
                    x+=dir[0];
                    y+=dir[1];
                    count++;
                }
                if(distance[s[0]][s[1]]+count<distance[x-dir[0]][y-dir[1]]){
                    distance[x-dir[0]][y-dir[1]] = distance[s[0]][s[1]]+count;
                }
            }
        }
    }
    private int[] minDistance(int[][] distance,boolean[][] visited){
        int[] min = {-1,-1};
        int min_val = Integer.MAX_VALUE;
        for(int i=0;i<distance.length;i++){
            for(int j=0;j<distance[0].length;j++){
                if(!visited[i][j] && distance[i][j]<min_val){
                    min = new int[]{i,j};
                    min_val = distance[i][j];
                }
            }
        }
        return min;
    }
}





Dijkstra with Priority Queue

class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int rows = maze.length;
        int cols = maze[0].length;
        int[][] distance = new int[rows][cols];
        
        for(int[] row:distance){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        distance[start[0]][start[1]] = 0;
        dijkstra(maze,start,distance);
        return distance[destination[0]][destination[1]]==Integer.MAX_VALUE?-1:distance[destination[0]][destination[1]];
    }
    private void dijkstra(int[][] maze,int[] start, int[][] distance){
        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b)->a[2]-b[2]);
        queue.offer(new int[]{start[0],start[1],0});
        while(!queue.isEmpty()){
            int[] s = queue.poll();
            if(distance[s[0]][s[1]]<s[2])
                continue;
            for(int[] dir:dirs){
                int x = s[0]+dir[0];
                int y = s[1]+dir[1];
                int count = 0;
                while(x>=0 && y>=0 && x<maze.length && y<maze[0].length && maze[x][y] ==0){
                    x+=dir[0];
                    y+=dir[1];
                    count++;
                }
                if(distance[s[0]][s[1]]+count<distance[x-dir[0]][y-dir[1]]){
                    distance[x-dir[0]][y-dir[1]]=distance[s[0]][s[1]]+count;
                    queue.offer(new int[]{x-dir[0],y-dir[1],distance[x-dir[0]][y-dir[1]]});
                }
            }
        }
    }
}




class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int rows = maze.length;
        int cols = maze[0].length;
        int[][] distance = new int[rows][cols];
        for(int[] row:distance){
            Arrays.fill(row,Integer.MAX_VALUE);
        }
        distance[start[0]][start[1]] = 0;
        Queue<int[]> queue = new LinkedList<>();
        queue.add(start);
        int[][] dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        while(!queue.isEmpty()){
            int[] element = queue.poll();
            for(int[] dir:dirs){
                int newR = dir[0]+element[0];
                int newC = dir[1]+element[1];
                int count=0;
                while(newR>=0 && newR<rows && newC>=0 && newC<cols && maze[newR][newC]==0){
                    newR+=dir[0];
                    newC+=dir[1];
                    count++;
                }
                newR-=dir[0];
                newC-=dir[1];
                if(distance[element[0]][element[1]]+count<distance[newR][newC]){
                    distance[newR][newC] = distance[element[0]][element[1]]+count;
                    queue.add(new int[]{newR,newC});
                }
            }
        }
        return distance[destination[0]][destination[1]]==Integer.MAX_VALUE?-1:distance[destination[0]][destination[1]];
    }
}
