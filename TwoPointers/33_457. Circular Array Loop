457. Circular Array Loop
Solved

avatar
Discuss Approach
arrow-up
Medium
Topics
conpanies icon
Companies
You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:

If nums[i] is positive, move nums[i] steps forward, and
If nums[i] is negative, move nums[i] steps backward.
Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices seq of length k where:

Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
Every nums[seq[j]] is either all positive or all negative.
k > 1
Return true if there is a cycle in nums, or false otherwise.

 

Example 1:

Input: nums = [2,-1,1,2,2]
Output: true
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).
Example 2:


Input: nums = [-1,-2,-3,-4,-5,6]
Output: false
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
The only cycle is of size 1, so we return false.
Example 3:


Input: nums = [1,-1,5,1,4]
Output: true
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
We can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.
We can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).
 

Constraints:

1 <= nums.length <= 5000
-1000 <= nums[i] <= 1000
nums[i] != 0
 

Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?



class Solution {
    public boolean circularArrayLoop(int[] nums) {
        int n = nums.length;
        for(int i=0;i<nums.length;i++){
            Set<Integer> set = new HashSet<>();
            boolean isForward = nums[i]>=0;
            if(dfs(i,nums,set,isForward)){
                return true;
            }
        }
        return false;
    }
    private boolean dfs(int startIndex,int[] nums,Set<Integer> set, boolean isForward){
        if(startIndex<0||startIndex>=nums.length) return false;
        if(nums[startIndex]<0 && isForward) return false;
        if(nums[startIndex]>=0 && !isForward) return false;
        int index = (nums[startIndex]+startIndex)%nums.length;
        if(index<0){
            index=nums.length+index;
        }
        if(index==startIndex) return false;
        if(set.contains(index)) return true;
        set.add(index);
        if(dfs(index,nums,set,isForward)){
            return true;
        }
        return false;
    }
}

class Solution {
    public boolean circularArrayLoop(int[] nums) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            boolean isForward = nums[i]>0;
            int slow = i, fast = i;
            while(true){
                slow = next(slow,isForward,nums);
                fast = next(fast,isForward,nums);
                if(fast!=-1){
                    fast = next(fast,isForward,nums);
                }
                if(slow==-1||fast==-1||fast==slow){
                    break;
                }
            }
            if(slow!=-1 && fast!=-1 && fast==slow){
                return true;
            }
            int index = i;
            while(index!=-1 && (nums[index]>0)==isForward){
                int nextIndex = next(index,isForward,nums);
                nums[index]=0;
                index = nextIndex;
            }
        }
        return false;
    }
    private int next(int i,boolean isForward,int[] nums){
        int n = nums.length;
        boolean direction = nums[i]>0;
        if(direction!=isForward) return -1;
        int next = (((i+nums[i])%n)+n)%n;
        if(i==next) return -1;
        return next;
    }
}
