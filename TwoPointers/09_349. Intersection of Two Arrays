URL: https://leetcode.com/problems/intersection-of-two-arrays/description/

349. Intersection of Two Arrays

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 
Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].

Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

 
Constraints:

	nums1.length == m + n
	nums2.length == n
	0 <= m, n <= 200
	1 <= m + n <= 200
	-109 <= nums1[i], nums2[j] <= 109

 
Follow up: Can you come up with an algorithm that runs in O(m + n) time?

Approach 1: Brute Force
check each element from array 1 with each element of array 2 and if any element found put that in result set.
Time : O(n^2)

Approach 2: 
Apply sorting on Array.
Use 2 pointer each for array.
if both the element are same put that in list otherwise increate pointer of smaller element.
Time : O(mLogm + nLogn)

Approach 3:
Put all element to 2 different set respectively.
use retainAll method to retain only common element.

Approach 4:
Swap method call if nums1 is greater than nums2.
Put all element to set and start iterating smaller list.
if element exist in set2 add to the result.
return result
Time complexity: O(n+m)
Space complexity: O(m+n)

Approach 5:
Put element from first array into hashmap marking it value as 1.
Now while iterating element check if elemet exist and has value 1, add element to result.
Time complexity: O(n+m)
Space Complexity: O(n);

Approach 6:
Review the constraint it mention that max vlaue of element is 1000 so we create array of 1001 that 
make space complexity as constant.
Now start putting element from 1 array to temp array of size 1001 and set value as 1
while iterating elemnt from 2 array if it already exist increase value in temp by 1 and also increase 
found counter.
Now iterate over temp list which is constant of O(1001), check if element is equal to 2, set counter for element 
to 1 and add element to result list.


Approach 5
