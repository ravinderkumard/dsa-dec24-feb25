287. Find the Duplicate Number

URL: https://leetcode.com/problems/find-the-duplicate-number/description/?envType=problem-list-v2&envId=azcxmsi1



Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and using only constant extra space.

 
Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

Example 2:

Input: nums = [3,1,3,4,2]
Output: 3

Example 3:

Input: nums = [3,3,3,3,3]
Output: 3

 
Constraints:

	1 <= n <= 105
	nums.length == n + 1
	1 <= nums[i] <= n
	All the integers in nums appear only once except for precisely one integer which appears two or more times.

 
Follow up:

	How can we prove that at least one duplicate number must exist in nums?
	Can you solve the problem in linear runtime complexity?







class Solution {
    public int findDuplicate(int[] nums) {
        boolean[] find = new boolean[nums.length+1];
        for(int num:nums){
            if(find[num]){
                return num;
            }
            find[num] = true;
        }
        return -1;
    }
}



class Solution {
    public int findDuplicate(int[] nums) {
        int[] count = new int[nums.length+1];
        Arrays.fill(count,0);
        for(int n:nums){
            count[n]++;
        }
        for(int i=1;i<=nums.length;i++){
            if(count[i]>1){
                return i;
            }
        }
        return -1;
    }
}


class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow!=fast);
        fast = nums[0];
        while(fast!=slow){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
}
