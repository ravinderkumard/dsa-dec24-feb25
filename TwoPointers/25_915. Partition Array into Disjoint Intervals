URL: https://leetcode.com/problems/partition-array-into-disjoint-intervals/description/

915. Partition Array into Disjoint Intervals

Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:

	Every element in left is less than or equal to every element in right.
	left and right are non-empty.
	left has the smallest possible size.

Return the length of left after such a partitioning.

Test cases are generated such that partitioning exists.

 
Example 1:

Input: nums = [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]

Example 2:

Input: nums = [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]

 
Constraints:

	2 <= nums.length <= 105
	0 <= nums[i] <= 106
	There is at least one valid answer for the given input.


Approach:
1. Determine LeftMax and RightMax using the array.
2. Iterate for each element if value as current index is less than or equal to value at right max
3. Return current index.
Time Complexity: O(N),
Space Complexity: O(N)


Approach 2:
1. Reduce the implementation of leftMax.
2. Update the value in 3rd loop.
3. fi currMax is less than rightMax return index.
Time Complexity: O(N)
Space Complexity: O(N)  

Approach 3:
1. Define 2 variable currmax and possible max and set 1 element as there values.
2. Start iterating from 1 element to last.
3. As soon we find element is less than currMax update the length by i+1, and possible vlaue as currValue.
4. Otherwise, update possible max with max of possible max and element(i);
5. return length
