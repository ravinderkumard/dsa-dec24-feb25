URL: https://leetcode.com/problems/trapping-rain-water/description/?envType=problem-list-v2&envId=aztpy7sh

42. Trapping Rain Water

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 
Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9

 
Constraints:

	n == height.length
	1 <= n <= 2 * 104
	0 <= height[i] <= 105



class Solution {
    public int trap(int[] height) {
        int ans = 0;
        int size = height.length;
        for (int i = 1; i < size - 1; i++) {
            int left_max = 0, right_max = 0;
            // Search the left part for max bar size
            for (int j = i; j >= 0; j--) {
                left_max = Math.max(left_max, height[j]);
            }
            // Search the right part for max bar size
            for (int j = i; j < size; j++) {
                right_max = Math.max(right_max, height[j]);
            }
            ans += Math.min(left_max, right_max) - height[i];
        }
        return ans;
    }
}

Complexity Analysis
Time complexity: O(n^2). For each element of array, we iterate the left and right parts.

Space complexity: O(1) extra space.




class Solution {
    public int trap(int[] height) {
        // Case of empty height array
        if (height.length == 0) return 0;
        int ans = 0;
        int size = height.length;
        // Create left and right max arrays
        int[] left_max = new int[size];
        int[] right_max = new int[size];
        // Initialize first height into left max
        left_max[0] = height[0];
        for (int i = 1; i < size; i++) {
            // update left max with current max
            left_max[i] = Math.max(height[i], left_max[i - 1]);
        }
        // Initialize last height into right max
        right_max[size - 1] = height[size - 1];
        for (int i = size - 2; i >= 0; i--) {
            // update right max with current max
            right_max[i] = Math.max(height[i], right_max[i + 1]);
        }
        // Calculate the trapped water
        for (int i = 1; i < size - 1; i++) {
            ans += Math.min(left_max[i], right_max[i]) - height[i];
        }
        // Return amount of trapped water
        return ans;
    }
}
Complexity Analysis
Time complexity: O(n).

We store the maximum heights upto a point using 2 iterations of O(n) each.
We finally update ans using the stored values in O(n).
Space complexity: O(n) extra space.

Additional O(n) space for left_max and right_max arrays than in Approach 1.


class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int leftMax = Integer.MIN_VALUE;
        int rightMax = Integer.MIN_VALUE;
        int left = 0;
        int right = n-1;
        int ans = 0;
        while(left<=right){
            if(height[left]<height[right]){
                leftMax = Math.max(leftMax,height[left]);
                ans+=leftMax-height[left];
                left++;
            } else {
                rightMax = Math.max(rightMax,height[right]);
                ans+=rightMax-height[right];
                right--;
            }
        }
        return ans;
    }
}

Complexity Analysis
Time complexity: O(n). Single iteration of O(n).
Space complexity: O(1) extra space. Only constant space required for left, right, left_max and right_max.
