URL: https://leetcode.com/problems/maximum-depth-of-binary-tree/description/

104. Maximum Depth of Binary Tree

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:

Input: root = [1,null,2]
Output: 2

 
Constraints:

	The number of nodes in the tree is in the range [0, 104].
	-100 <= Node.val <= 100


Recursive Solution 1:
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        } else {
            int left_height = maxDepth(root.left);
            int right_height = maxDepth(root.right);
            return java.lang.Math.max(left_height, right_height) + 1;
        }
    }
}

Recursive Solution 2:
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
}


class Solution {
    public int maxDepth(TreeNode root) {
        LinkedList<TreeNode> stack = new LinkedList<>();
        LinkedList<Integer> depths = new LinkedList<>();
        if(root==null){
            return 0;
        }
        stack.add(root);
        depths.add(1);
        int depth = 0,current_depth = 0;
        while(!stack.isEmpty()){
            root = stack.pollLast();
            current_depth = depths.pollLast();
            if(root!=null){
                depth = Math.max(depth,current_depth);
                stack.add(root.left);
                stack.add(root.right);
                depths.add(current_depth+1);
                depths.add(current_depth+1);
            }
        }
        return depth;
    }
}
